<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[SCONS Introduction]]></title>
      <url>http://czlitony.github.io/2018/02/27/2018-02-27-scons-introduction/</url>
      <content type="html"><![CDATA[<p>Breifly introduce SCONS.</p>
<a id="more"></a>
<p>References:<br><a href="http://scons.org/doc/production/HTML/scons-man.html" target="_blank" rel="noopener">SCONS User Manual</a><br><a href="http://scons.org/doc/production/HTML/scons-user/index.html" target="_blank" rel="noopener">SCONS User Guide</a><br><a href="http://scons.org/doc/latest/HTML/scons-api/index.html" target="_blank" rel="noopener">SCONS API</a></p>
<h1 id="SCONS-basic-knowledge"><a href="#SCONS-basic-knowledge" class="headerlink" title="SCONS basic knowledge"></a>SCONS basic knowledge</h1><h2 id="SConstruct"><a href="#SConstruct" class="headerlink" title="SConstruct"></a>SConstruct</h2><p>SConstruct file is a python script. The SConstruct file is the input file that SCons reads to control the build.<br>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── SConstruct</div><div class="line">└── hello.cpp</div></pre></td></tr></table></figure></p>
<p>hello.cpp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">    cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>SConstruct:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Program(&apos;hello.cpp&apos;)</div></pre></td></tr></table></figure></p>
<p>Now we can build the program.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  /Users/chengzhI/scons/SConstruct &gt; scons</div><div class="line">scons: Reading SConscript files ...</div><div class="line">scons: done reading SConscript files.</div><div class="line">scons: Building targets ...</div><div class="line">g++ -o hello.o -c hello.cpp</div><div class="line">g++ -o hello hello.o</div><div class="line">scons: done building targets.</div></pre></td></tr></table></figure></p>
<h2 id="SConscript"><a href="#SConscript" class="headerlink" title="SConscript"></a>SConscript</h2><p>As we’ve already seen, the build script at the top of the tree is called SConstruct. The top-level SConstruct file can use the SConscript function to include other subsidiary scripts in the build. These subsidiary scripts can, in turn,use the SConscript function to include still other scripts in the build.<br>For example, a top-level SConstruct file might arrange for four subsidiary scripts to be included in the build as follows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SConscript([&apos;drivers/display/SConscript&apos;,</div><div class="line">            &apos;drivers/mouse/SConscript&apos;,</div><div class="line">            &apos;parser/SConscript&apos;,</div><div class="line">            &apos;utilities/SConscript&apos;])</div></pre></td></tr></table></figure></p>
<p>In this case, the SConstruct file lists all of the SConscript files in the build explicitly. (Note, however, that not every directory in the tree necessarily has an SConscript file.) Alternatively, the drivers subdirectory might contain an intermediate SConscript file, in which case the SConscript call in the top-level SConstruct file would look like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SConscript([&apos;drivers/SConscript&apos;,</div><div class="line">            &apos;parser/SConscript&apos;,</div><div class="line">            &apos;utilities/SConscript&apos;])</div></pre></td></tr></table></figure></p>
<p>And the subsidiary SConscript file in the drivers subdirectory would look like:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SConscript([&apos;display/SConscript&apos;,</div><div class="line">            &apos;mouse/SConscript&apos;])</div></pre></td></tr></table></figure></p>
<h2 id="Build-Targets"><a href="#Build-Targets" class="headerlink" title="Build Targets"></a>Build Targets</h2><p>scons is normally executed in a top-level directory containing a SConstruct file, optionally specifying as command-line arguments the target file or files to be built.<br>By default, the command<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scons</div></pre></td></tr></table></figure></p>
<p>will build all target files in or below the current directory. Explicit default targets (to be built when no targets are specified on the command line) may be defined the SConscript file(s) using the Default() function, described below.<br>Even when Default() targets are specified in the SConscript file(s), all target files in or below the current directory may be built by explicitly specifying the current directory (.) as a command-line target:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scons .</div></pre></td></tr></table></figure></p>
<p>Building all target files, including any files outside of the current directory, may be specified by supplying a command-line target of the root directory (on POSIX systems):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scons /</div></pre></td></tr></table></figure></p>
<p>or the path name(s) of the volume(s) in which all the targets should be built (on Windows systems):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scons C:\ D:\</div></pre></td></tr></table></figure></p>
<p>To build only specific targets, supply them as command-line arguments:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scons foo bar</div></pre></td></tr></table></figure></p>
<p>in which case only the specified targets will be built (along with any derived files on which they depend).</p>
<h2 id="Build-Types"><a href="#Build-Types" class="headerlink" title="Build Types"></a>Build Types</h2><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>Build object files.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object(&apos;hello.c&apos;)</div></pre></td></tr></table></figure></p>
<p>Now when you run the scons command to build the program, it will build just the hello.o object file on a POSIX system:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">% scons</div><div class="line">scons: Reading SConscript files ...</div><div class="line">scons: done reading SConscript files.</div><div class="line">scons: Building targets ...</div><div class="line">cc -o hello.o -c hello.c</div><div class="line">scons: done building targets.</div></pre></td></tr></table></figure></p>
<p>See also StaticObject, SharedObject.</p>
<h3 id="Library-StaticLibrary"><a href="#Library-StaticLibrary" class="headerlink" title="Library, StaticLibrary"></a>Library, StaticLibrary</h3><p>Build static libraries.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Library(&apos;foo&apos;, [&apos;f1.c&apos;, &apos;f2.o&apos;, &apos;f3.c&apos;, &apos;f4.o&apos;])</div><div class="line"></div><div class="line">StaticLibrary(&apos;foo&apos;, [&apos;f1.c&apos;, &apos;f2.c&apos;, &apos;f3.c&apos;])</div></pre></td></tr></table></figure></p>
<h3 id="SharedLibrary"><a href="#SharedLibrary" class="headerlink" title="SharedLibrary"></a>SharedLibrary</h3><p>Build shared (DLL) libraries.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SharedLibrary(&apos;foo&apos;, [&apos;f1.c&apos;, &apos;f2.c&apos;, &apos;f3.c&apos;])</div></pre></td></tr></table></figure></p>
<h3 id="LoadableModule"><a href="#LoadableModule" class="headerlink" title="LoadableModule"></a>LoadableModule</h3><p>On most systems, this is the same as SharedLibrary. On Mac OS X (Darwin) platforms, this creates a loadable module bundle.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">module = envLocal.LoadableModule(&apos;CiscoSparkMercury&apos;, sources)</div></pre></td></tr></table></figure></p>
<h3 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h3><p>Build programs.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Program(&apos;bar.c&apos;)</div></pre></td></tr></table></figure></p>
<h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><p>An environment is a collection of values that can affect how a program executes. SCons distinguishes between three different types of environments that can affect the behavior of SCons itself (subject to the configuration in the SConscript files), as well as the compilers and other tools it executes:</p>
<h3 id="External-Environment"><a href="#External-Environment" class="headerlink" title="External Environment"></a>External Environment</h3><p>The external environment is the set of variables in the user’s environment at the time the user runs SCons. These variables are available within the SConscript files through the Python <strong><em>os.environ</em></strong> dictionary.</p>
<h3 id="Construction-Environment"><a href="#Construction-Environment" class="headerlink" title="Construction Environment"></a>Construction Environment</h3><p>A construction environment is a distinct object creating within a SConscript file and and which contains values that affect how SCons decides what action to use to build a target, and even to define which targets should be built from which sources. One of the most powerful features of SCons is the ability to create multiple construction environments, including the ability to clone a new, customized construction environment from an existing construction environment.</p>
<h3 id="Execution-Environment"><a href="#Execution-Environment" class="headerlink" title="Execution Environment"></a>Execution Environment</h3><p>An execution environment is the values that SCons sets when executing an external command (such as a compiler or linker) to build one or more targets. Note that this is not the same as the external environment (see above).<br><strong><em>The default value of the PATH environment variable on a POSIX system is /usr/local/bin:/bin:/usr/bin. The default value of the PATH environment variable on a Windows system comes from the Windows registry value for the command interpreter.</em></strong> If you want to execute any commands–compilers, linkers, etc.–that are not in these default locations, you need to set the PATH value in the $ENV dictionary in your construction environment.</p>
<p>The simplest way to do this is to initialize explicitly the value when you create the construction environment; this is one way to do that:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">path = [&apos;/usr/local/bin&apos;, &apos;/bin&apos;, &apos;/usr/bin&apos;]</div><div class="line">env = Environment(ENV = &#123;&apos;PATH&apos; : path&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Default"><a href="#Default" class="headerlink" title="Default"></a>Default</h2><p>This specifies a list of default targets, which will be built by scons if no explicit targets are given on the command line. Multiple calls to Default are legal, and add to the list of default targets.<br>Multiple targets should be specified as separate arguments to the Default method, or as a list. Default will also accept the Node returned by any of a construction environment’s builder methods.<br>Examples:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Default(&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;)</div><div class="line">env.Default([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;])</div><div class="line">hello = env.Program(&apos;hello&apos;, &apos;hello.c&apos;)</div><div class="line">env.Default(hello)</div></pre></td></tr></table></figure></p>
<p>An argument to Default of None will clear all default targets. Later calls to Default will add to the (now empty) default-target list like normal.<br>The current list of targets added using the Default function or method is available in the DEFAULT_TARGETS list; see below.</p>
<h2 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h2><p>Creates one or more phony targets that expand to one or more other targets.<br>Examples:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">env = Environment()</div><div class="line">hello = env.Program(&apos;hello.cpp&apos;)</div><div class="line">env.Install(&apos;/usr/local/bin&apos;, hello)</div><div class="line">Alias(&apos;install&apos;, &apos;/usr/local/bin&apos;)</div></pre></td></tr></table></figure></p>
<h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p>Executes a specific action (or list of actions) to build a target file or files.<br>Examples:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Command(&quot;file.out&quot;, &quot;file.in&quot;, Copy(&quot;$TARGET&quot;, &quot;$SOURCE&quot;))</div><div class="line"></div><div class="line"></div><div class="line">def builderMethod(target, source, env):</div><div class="line">    ## create targets by processing model</div><div class="line">    targets, sources = processModel(env)</div><div class="line">builder = builderEnv.Command(targets, sources, builderMethod)</div></pre></td></tr></table></figure></p>
<h2 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h2><p>The Tool form of the function returns a callable object that can be used to initialize a construction environment using the tools keyword of the Environment() method.<br><a href="https://bitbucket.org/scons/scons/wiki/ToolsIndex" target="_blank" rel="noopener">SCONS ToolsIndex</a></p>
<p>Tools in Jabber:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">env.Tool(shoggoth.tool)</div><div class="line">env.Tool(msvcgen.tool)</div></pre></td></tr></table></figure></p>
<p>/Users/chengzhI/jabber/trunk/tools/scripts/build/csfenv.py:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">DEFAULT_TOOLS = [</div><div class="line">    &apos;libraries&apos;,</div><div class="line">    &apos;platforms&apos;,</div><div class="line">    &apos;emitters&apos;,</div><div class="line">    &apos;builddir&apos;,</div><div class="line">    csftest.tool,</div><div class="line">    output.tool,</div><div class="line">    preCommit.tool,</div><div class="line">    iniInstallAndAppend.tool,</div><div class="line">    reflection.tool</div><div class="line">]</div><div class="line"></div><div class="line">def Environment(**kw):</div><div class="line">    kwargs, tools = environmentKwargs(kw, DEFAULT_TOOLS)</div><div class="line">    ...</div><div class="line">    ## Load default tools and tools specified by the caller</div><div class="line">    for tool in tools:</div><div class="line">        env.Tool(tool, **kwargs)</div></pre></td></tr></table></figure></p>
<h2 id="Emitter"><a href="#Emitter" class="headerlink" title="Emitter"></a>Emitter</h2><p>A function or list of functions to manipulate the target and source lists before dependencies are established and the target(s) are actually built.<br>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">env = Environment()</div><div class="line"></div><div class="line">def Output_Emitter(target, source, env):</div><div class="line">    out_targets = []</div><div class="line">    for t in target:</div><div class="line">        out_target = File(os.path.join(&apos;out&apos;, str(t)))</div><div class="line">        out_targets.append(out_target)</div><div class="line"></div><div class="line">    return out_targets, source</div><div class="line"></div><div class="line">env[&apos;LIBEMITTER&apos;] = Output_Emitter</div><div class="line"></div><div class="line">env.StaticLibrary(&apos;hello&apos;, &apos;hello.cpp&apos;)</div></pre></td></tr></table></figure></p>
<p>Jabber uses Emitter to control the build output directory: tools/scripts/build/csfenv.py</p>
<h2 id="PCH"><a href="#PCH" class="headerlink" title="PCH"></a>PCH</h2><p><a href="https://blog.csdn.net/luoweifu/article/details/49010627" target="_blank" rel="noopener">Microsoft Pre-compiled headers technology</a><br>Builds a Microsoft Visual C++ precompiled header. Calling this builder method returns a list of two targets: the PCH as the first element, and the object file as the second element. Normally the object file is ignored. This builder method is only provided when Microsoft Visual C++ is being used as the compiler. The PCH builder method is generally used in conjunction with the PCH construction variable to force object files to use the precompiled header.<br>The useage of PCH in Jabber can refer to tools/scripts/build/csfenv.py.</p>
<h1 id="Jabber-build-system-introduction"><a href="#Jabber-build-system-introduction" class="headerlink" title="Jabber build system introduction"></a>Jabber build system introduction</h1><h2 id="shoggoth"><a href="#shoggoth" class="headerlink" title="shoggoth"></a>shoggoth</h2><p>A shoggoth (occasionally shaggoth[1]) is a monster in the Cthulhu Mythos. Here shoggoth in Jabber is a tool to generate API header files, base class files, Object C wrappers and Jets reflactors files.<br>e.g.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ShoggothCPPInterface: Generate Interface headers</div><div class="line">ShoggothCPPNotifierImpl: Generate Notifier Implement files</div><div class="line">ShoggothCPPBoilerplate: Generate Base Implement files</div><div class="line">ShoggothReflectorHeader: Generate Jets sreflactor headers</div><div class="line">ShoggothReflectorBody: Generate Jets reflactor implement files</div></pre></td></tr></table></figure></p>
<p>shoggoth python script file lation:<br>tools\jcfscripts\shoggoth\shoggoth.py</p>
<h2 id="csfenv-Environments"><a href="#csfenv-Environments" class="headerlink" title="csfenv.Environments"></a>csfenv.Environments</h2><p>Create SCONS Construction Environments to build Jabber.<br>There are some major jobs done when contruct the Environment:</p>
<h3 id="Inject-some-default-tools"><a href="#Inject-some-default-tools" class="headerlink" title="Inject some default tools"></a>Inject some default tools</h3><p>Those are the default tools:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">DEFAULT_TOOLS = [</div><div class="line">    &apos;libraries&apos;,</div><div class="line">    &apos;platforms&apos;,</div><div class="line">    &apos;emitters&apos;,</div><div class="line">    &apos;builddir&apos;,</div><div class="line">    csftest.tool,</div><div class="line">    output.tool,</div><div class="line">    preCommit.tool,</div><div class="line">    iniInstallAndAppend.tool,</div><div class="line">    reflection.tool</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>In those tools, the function of ‘emitters’ is to put the output targets in specific folders.<br>e.g. On Windows, dynamic libraries and executive programs etc. are put in the folder ‘products\jabber-win\src\jabber-client\jabber-build\Win32\bin\Release’</p>
<h3 id="Add-the-library-“builders”-to-the-environment"><a href="#Add-the-library-“builders”-to-the-environment" class="headerlink" title="Add the library “builders” to the environment"></a>Add the library “builders” to the environment</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Add the Service library Builders to the environment</div><div class="line">env.AddMethod(StaticServiceLibrary)</div><div class="line">env.AddMethod(SharedServiceLibrary)</div><div class="line"># Add the Prebuilt library &quot;builders&quot; to the environment</div><div class="line">env.AddMethod(PrebuiltSharedLibrary)</div><div class="line">env.AddMethod(PrebuiltStaticLibrary)</div></pre></td></tr></table></figure>
<h3 id="Builds-a-Microsoft-Visual-C-precompiled-header"><a href="#Builds-a-Microsoft-Visual-C-precompiled-header" class="headerlink" title="Builds a Microsoft Visual C++ precompiled header."></a>Builds a Microsoft Visual C++ precompiled header.</h3><p>Those are the precompiled files:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pre-compiled.h</div><div class="line">pre-compiled-debug.cpp</div><div class="line">pre-compiled-release.cpp</div></pre></td></tr></table></figure></p>
<p>On Windows, the precompiled header is generated by default.<br>If we want to build ‘*.c’ sources, we can remove the precompiled header by this way:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">envLocal = env.Clone()</div><div class="line"></div><div class="line">if envLocal.get(&apos;PCH&apos;, None) != None:</div><div class="line">    envLocal.no_pre_compiled_headers()</div></pre></td></tr></table></figure></p>
<h3 id="Inject-some-variables"><a href="#Inject-some-variables" class="headerlink" title="Inject some variables"></a>Inject some variables</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for env in csfenv.Environments(BUILD_TARGETS,</div><div class="line">                               CSF_PROJECT_NAME=&apos;jabberwerxcpp&apos;,</div><div class="line">                               windows_arch=&apos;x86&apos;,</div><div class="line">                               windows_mbcs=&apos;unicode&apos;,</div><div class="line">                               macosx_arch=&apos;x86_64&apos;):</div></pre></td></tr></table></figure>
<p>windows_arch: Windows Jabber architecture<br>macosx_arch: Mac Jabber architecture<br>windows_mbcs: <a href="https://msdn.microsoft.com/en-us/library/cwe8bzh0.aspx" target="_blank" rel="noopener">Unicode and MBCS - MSDN - Microsoft</a>. If you see this error  ‘error C2440: cannot convert from ‘const char [7]’ to ‘LPCWSTR’’, you need to set windows_mbcs to ‘mbcs’.<br>CUSTOM_BUILDER_OUTPUT: Custom the build output directory, replace the default emitter output directory.</p>
<p>csfenv.Environments python script file lation:<br>tools\scripts\build\csfenv.py</p>
<h2 id="RegisterLibrary-and-UseLibrary"><a href="#RegisterLibrary-and-UseLibrary" class="headerlink" title="RegisterLibrary and UseLibrary"></a>RegisterLibrary and UseLibrary</h2><h3 id="RegisterLibrary"><a href="#RegisterLibrary" class="headerlink" title="RegisterLibrary"></a>RegisterLibrary</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">env.RegisterLibrary(&apos;systemservice&apos;,   (Note that here uses &apos;env&apos; instead of a cloned environment)</div><div class="line">    COMPILE=&#123;</div><div class="line">        &apos;CPPPATH&apos;: [Dir(&apos;../include&apos;).abspath,Dir(&apos;../api&apos;).abspath]</div><div class="line">    &#125;,</div><div class="line">    LINK=&#123;</div><div class="line">        &apos;LIBS&apos;: linkLibraries,</div><div class="line">        &apos;LINKFLAGS&apos;: linkflags</div><div class="line">    &#125;,</div><div class="line">    GET_SERVICE_FILES = &#123;</div><div class="line">        &apos;SERVICE_FILES&apos; : serviceFiles</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h3 id="UseLibrary"><a href="#UseLibrary" class="headerlink" title="UseLibrary"></a>UseLibrary</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">envLocal.UseLibrary(&apos;jcfcoreutils&apos;, actions=[&apos;COMPILE&apos;])</div><div class="line">envLocal.UseLibrary(&apos;csfstorage&apos;, actions=[&apos;COMPILE&apos;])</div><div class="line">envLocal.UseLibrary(&apos;systemmonitor&apos;, actions=[&apos;COMPILE&apos;])</div><div class="line">envLocal.UseLibrary(&apos;servicesframework&apos;)</div><div class="line">envLocal.UseLibrary(&apos;configservice&apos;)</div><div class="line">envLocal.UseLibrary(&apos;csfnetutils&apos;)</div></pre></td></tr></table></figure>
<p>RegisterLibrary and UseLibrary python script file lation:<br>tools\scripts\build\libraries.py</p>
<h2 id="Use-thirdparty-pre-buildt-libraries"><a href="#Use-thirdparty-pre-buildt-libraries" class="headerlink" title="Use thirdparty pre-buildt libraries"></a>Use thirdparty pre-buildt libraries</h2><p>PrebuiltSharedLibrary<br>PrebuiltStaticLibrary<br>e.g.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">if envLocal.TargetPlatform() == &apos;windows&apos;:</div><div class="line">    includePath = [os.path.join(rootDir, &apos;include&apos;), os.path.join(rootDir, &apos;windows&apos;, env[&apos;msvs&apos;], &apos;include&apos;)]</div><div class="line">    libsPath = os.path.join(rootDir, &apos;windows&apos;, env[&apos;msvs&apos;], configuration, &apos;lib&apos;)</div><div class="line">    built_files = Glob(os.path.join(libsPath,&apos;*.dll&apos;)) + Glob(os.path.join(libsPath,&apos;*.lib&apos;))</div><div class="line">    dllFiles, libFiles = envLocal.PrebuiltSharedLibrary(built_files)</div><div class="line">    </div><div class="line">    libFiles.append(&apos;ws2_32.lib&apos;)</div><div class="line"></div><div class="line">env.RegisterLibrary(&apos;libcurl&apos;,</div><div class="line">    COMPILE=&#123;</div><div class="line">        &apos;CPPPATH&apos;: includePath </div><div class="line">     &#125;,</div><div class="line">    LINK=&#123;</div><div class="line">        &apos;LIBS&apos;: libFiles</div><div class="line">    &#125;,</div><div class="line">    GET_DLLS = &#123;</div><div class="line">        &apos;DLLS&apos;: dllFiles</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h2 id="dependencyList-txt"><a href="#dependencyList-txt" class="headerlink" title="dependencyList.txt"></a>dependencyList.txt</h2><p>This file define all the submodules in a project.<br>Those submodules may rely on each other, those sunmodles are sequential. e.g. If A relies on B, then B should be put before A;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">servicesframework</div><div class="line">configservice-api</div><div class="line">configservice (servicesframework is relied by configservice, so servicesframework should be put before configservice )</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> scons </category>
            
        </categories>
        
        
        <tags>
            
            <tag> scons </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++ Notess]]></title>
      <url>http://czlitony.github.io/2017/09/16/2017-09-16-C++-Notes/</url>
      <content type="html"><![CDATA[<p>记录C++的一些零碎的知识点。</p>
<a id="more"></a>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>对于C++中的全局变量，如果是const声明的，那么这个变量仅仅在其定义的文件中有效；如果是不用const声明的全局变量是可以被其它文件访问的。<br>正是因为这个原因，在某个头文件中可以定义一些const全局变量，然后这个头文件可以被好多个其它的文件引用。如果const全局变量不具备在当前文件中有效的话，就不能这样引用该头文件了，因为那样会导致变量重复定义。<br>注意，每个引用了该头文件的文件中都会包含这个头文件中定义的变量，这样会导致程序占用内存增加，不过一般编译器会对const变量进行优化。</p>
<h1 id="Unamed-namespaces"><a href="#Unamed-namespaces" class="headerlink" title="Unamed namespaces"></a>Unamed namespaces</h1><p>Unamed namespaces 一般用在cpp文件中，里面可以定义一些变量,函数和类等，它们仅仅在当前文件中可用，可以用来替代static创建本地变量   </p>
<h1 id="shared-from-this"><a href="#shared-from-this" class="headerlink" title="shared_from_this"></a>shared_from_this</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">#include &lt;thread&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;memory&gt;</div><div class="line">#include &lt;functional&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">thread t;</div><div class="line"></div><div class="line">class Number : public enable_shared_from_this&lt;Number&gt; &#123;</div><div class="line">public:</div><div class="line">	Number() : num(123) &#123;&#125;;</div><div class="line"></div><div class="line">	void print() &#123;</div><div class="line">		t = thread(std::bind(&amp;Number::printNumber, shared_from_this()));</div><div class="line">		//t = thread(std::bind(&amp;Number::printNumber, this));</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	virtual ~Number() &#123;</div><div class="line">		cout &lt;&lt; &quot;~Number()&quot; &lt;&lt; endl;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">private:</div><div class="line">	void printNumber() &#123;</div><div class="line">		std::this_thread::sleep_for(2s);</div><div class="line">		cout &lt;&lt; &quot;The number is: &quot; &lt;&lt; this-&gt;num &lt;&lt; endl;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	int num;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">	std::shared_ptr&lt;Number&gt; num = std::make_shared&lt;Number&gt;();</div><div class="line">	num-&gt;print();</div><div class="line">	cout &lt;&lt; &quot;use_count is: &quot; &lt;&lt; num.use_count() &lt;&lt; endl;</div><div class="line">	num.reset();</div><div class="line">	cout &lt;&lt; &quot;After reset, use_count is: &quot; &lt;&lt; num.use_count() &lt;&lt; endl;</div><div class="line">	t.join();</div><div class="line"></div><div class="line">	int i;</div><div class="line">	cin &gt;&gt; i;</div><div class="line"></div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>When t = thread(std::bind(&amp;Number::printNumber, shared_from_this())); the result is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">use_count is: 2</div><div class="line">After reset, use_count is: 0</div><div class="line">The number is: 123</div><div class="line">~Number()</div></pre></td></tr></table></figure></p>
<p>When t = thread(std::bind(&amp;Number::printNumber, this)); the result is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">use_count is: 1</div><div class="line">~Number()</div><div class="line">After reset, use_count is: 0</div><div class="line">The number is: -572662307</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://czlitony.github.io/2017/07/10/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Notes]]></title>
      <url>http://czlitony.github.io/2017/07/10/2016-07-16-Notes/</url>
      <content type="html"><![CDATA[<p>本文主要记录平时遇到的一些杂碎的东西。</p>
<a id="more"></a>
<h2 id="Python实现xslt"><a href="#Python实现xslt" class="headerlink" title="Python实现xslt"></a>Python实现xslt</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python3</div><div class="line"># coding=utf-8</div><div class="line"># Created Time: 2016-06-20</div><div class="line"></div><div class="line">__author__ = &apos;Matthew Gao&apos;</div><div class="line"></div><div class="line">import lxml.etree as ET</div><div class="line">import pprint</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">def parse():</div><div class="line">    pp = pprint.PrettyPrinter(indent=4)</div><div class="line">    xml_filename = &apos;amc_one_of_everything.xml&apos;</div><div class="line">    xsl_filename = &apos;phonehometranslator.xsl&apos;</div><div class="line"></div><div class="line">    dom = ET.parse(xml_filename)</div><div class="line">    xslt = ET.parse(xsl_filename)</div><div class="line">    transform = ET.XSLT(xslt)</div><div class="line">    newdom = transform(dom)</div><div class="line">    # print(ET.tostring(newdom, pretty_print=True))</div><div class="line">    pp.pprint(ET.tostring(newdom, pretty_print=True).decode())</div><div class="line"></div><div class="line">    print(transform.error_log)</div><div class="line"></div><div class="line">    for entry in transform.error_log:</div><div class="line">        print(&apos;message from line %s, col %s: %s&apos; % (entry.line, entry.column, entry.message))</div><div class="line">        print(&apos;domain: %s (%d)&apos; % (entry.domain_name, entry.domain))</div><div class="line">        print(&apos;type: %s (%d)&apos; % (entry.type_name, entry.type))</div><div class="line">        print(&apos;level: %s (%d)&apos; % (entry.level_name, entry.level))</div><div class="line">        print(&apos;filename: %s&apos; % entry.filename)</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    parse()</div></pre></td></tr></table></figure>
<hr>
<h2 id="Java依赖第三方jar包调用方法"><a href="#Java依赖第三方jar包调用方法" class="headerlink" title="Java依赖第三方jar包调用方法"></a>Java依赖第三方jar包调用方法</h2><p>当java引用第三方jar包的时候，可以不用设置环境变量来引用，例如引用mysql-connector-java-5.1.39-bin.jar这个jar包（在当前路径下）可以用以下指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java -cp .:mysql-connector-java-5.1.39-bin.jar extensions.PersonalBookmarks</div><div class="line">java -cp .:mysql-connector-java-5.1.39-bin.jar extensions.Transform app</div><div class="line">java -cp .:mysql-connector-java-5.1.39-bin.jar extensions.Runtime</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="Ubantu-CLASSPATH设置"><a href="#Ubantu-CLASSPATH设置" class="headerlink" title="Ubantu CLASSPATH设置"></a>Ubantu CLASSPATH设置</h2><p>当java引用第三方jar包的时候需要将这个jar包所在的路径设置到CLASSPATH中去，设置的方法有以下几种：<br>以引用“～/phonehome/mysql-connector-java-5.1.39-bin.jar”这个jar包为例。</p>
<h3 id="针对所有用户"><a href="#针对所有用户" class="headerlink" title="针对所有用户"></a>针对所有用户</h3><p>如果你的计算机仅仅作为开发使用时推荐使用这种方法，因为所有用户的shell都有权使用这些环境变量，可能会给系统带来安全性问题。 </p>
<ul>
<li>用文本编辑器打开 /etc/profile 这个文件</li>
<li><p>在profile文件末尾加入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export CLASSPATH=.:$HOME/phonehome/mysql-connector-java-5.1.39-bin.jar</div></pre></td></tr></table></figure>
</li>
<li><p>重新登陆</p>
</li>
</ul>
<p><strong>注意：</strong></p>
<ul>
<li>linux下用冒号“:”来分隔路径 </li>
<li>CLASSPATH中当前目录“.”不能丢,把当前目录丢掉也是常见的错误。 </li>
<li>export是把这三个变量导出为全局变量。 </li>
<li>大小写必须严格区分。</li>
</ul>
<h3 id="针对特定用户"><a href="#针对特定用户" class="headerlink" title="针对特定用户"></a>针对特定用户</h3><p>这种方法更为安全，它可以把使用这些环境变量的权限控制到用户级别，如果你需要给某个用户权限使用这些环境变量，你只需要修改其个人用户主目录下的.profile文件就可以了。</p>
<ul>
<li>用文本编辑器打开 ~/.profile 这个文件</li>
<li><p>在.profile文件末尾加入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export CLASSPATH=.:$HOME/phonehome/mysql-connector-java-5.1.39-bin.jar</div></pre></td></tr></table></figure>
</li>
<li><p>重新登陆</p>
</li>
</ul>
<h3 id="临时设置"><a href="#临时设置" class="headerlink" title="临时设置"></a>临时设置</h3><p>不推荐使用这种方法，因为换个shell，你的设置就无效了，因此这种方法仅仅是临时使用，以后要使用的时候又要重新设置，比较麻烦。<br>在shell终端执行下列命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export CLASSPATH=.:$HOME/phonehome/mysql-connector-java-5.1.39-bin.jar</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="Ubantu设置静态IP"><a href="#Ubantu设置静态IP" class="headerlink" title="Ubantu设置静态IP"></a>Ubantu设置静态IP</h2><h3 id="配置IP"><a href="#配置IP" class="headerlink" title="配置IP"></a>配置IP</h3><p>打开文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/network/interfaces</div></pre></td></tr></table></figure></p>
<p>添加内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">auto eth0</div><div class="line">iface eth0 inet static</div><div class="line">address 10.103.62.141</div><div class="line">gateway 10.103.62.1</div><div class="line">netmask 255.255.255.0</div><div class="line">network 10.103.62.0</div><div class="line">broadcast 10.103.62.255</div></pre></td></tr></table></figure></p>
<h3 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h3><p>打开文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/resolvconf/resolv.conf.d/base</div></pre></td></tr></table></figure></p>
<p>添加内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nameserver 10.190.202.200</div></pre></td></tr></table></figure></p>
<h3 id="重启系统"><a href="#重启系统" class="headerlink" title="重启系统"></a>重启系统</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo init 6</div></pre></td></tr></table></figure>
<hr>
<h2 id="shell脚本几种执行方式"><a href="#shell脚本几种执行方式" class="headerlink" title="shell脚本几种执行方式"></a>shell脚本几种执行方式</h2><p>假设shell脚本文件为hello.sh<br>放在/root目录下。下面介绍几种在终端执行shell脚本的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost home]# cd /root/</div><div class="line">[root@localhost ~]#vim hello.sh</div><div class="line">#!  /bin/bash</div><div class="line">cd /tmp</div><div class="line">echo &quot;hello guys!&quot;</div><div class="line">echo &quot;welcome to my Blog:linuxboy.org!&quot;</div></pre></td></tr></table></figure></p>
<h3 id="切换到shell脚本所在的目录，执行："><a href="#切换到shell脚本所在的目录，执行：" class="headerlink" title="切换到shell脚本所在的目录，执行："></a>切换到shell脚本所在的目录，执行：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ./hello.sh</div><div class="line">-bash: ./ hello.sh: 权限不够</div></pre></td></tr></table></figure>
<h3 id="以绝对路径的方式执行："><a href="#以绝对路径的方式执行：" class="headerlink" title="以绝对路径的方式执行："></a>以绝对路径的方式执行：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# /root/Desktop/hello.sh</div><div class="line">-bash: /root/Desktop/ hello.sh: 权限不够</div></pre></td></tr></table></figure>
<h3 id="直接用bash或sh执行："><a href="#直接用bash或sh执行：" class="headerlink" title="直接用bash或sh执行："></a>直接用bash或sh执行：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# bash hello.sh</div><div class="line">hello guys!</div><div class="line">welcome to my Blog:linuxboy.org!</div><div class="line">[root@localhost ~]# pwd</div><div class="line">/root</div><div class="line"> </div><div class="line">[root@localhost ~]# sh hello.sh</div><div class="line">hello guys!</div><div class="line">welcome to my Blog:linuxboy.org!</div><div class="line">[root@localhost ~]# pwd</div><div class="line">/root</div></pre></td></tr></table></figure>
<p>注意：用以上三种方法执行shell脚本，现行的shell会开启一个子shell环境，去执行shell脚本，前两种必须要有执行权限才能够执行</p>
<p>也可以让shell脚本在现行的shell中执行：</p>
<h3 id="现行的shell中执行"><a href="#现行的shell中执行" class="headerlink" title="现行的shell中执行"></a>现行的shell中执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# . hello.sh</div><div class="line">hello guys!</div><div class="line">welcome to my Blog:linuxboy.org!</div><div class="line">[root@localhost tmp]# pwd</div><div class="line">/tmp</div><div class="line"> </div><div class="line"> </div><div class="line">[root@localhost ~]# source hello.sh</div><div class="line">hello guys!</div><div class="line">welcome to my Blog:linuxboy.org!</div><div class="line">[root@localhost tmp]# pwd</div><div class="line">/tmp</div></pre></td></tr></table></figure>
<p>对于第4种不会创建子进程，而是在父进程中直接执行<br>上面的差异是因为子进程不能改变父进程的执行环境，所以CD(内建命令，只有内建命令才可以改变shell 的执行环境)没有成功，但是第4种没有子进程，所以CD成功</p>
<hr>
<h2 id="在ubantu上面安装python3-4的虚拟环境"><a href="#在ubantu上面安装python3-4的虚拟环境" class="headerlink" title="在ubantu上面安装python3.4的虚拟环境"></a>在ubantu上面安装python3.4的虚拟环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python3.4-venv</div></pre></td></tr></table></figure>
<p>如果需要一个名为flask虚拟环境， 则执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python3 -m venv flask</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> samba </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SVN常用命令]]></title>
      <url>http://czlitony.github.io/2017/02/07/2017-02-07-svn-commands/</url>
      <content type="html"><![CDATA[<p>介绍一些常用的svn命令。</p>
<a id="more"></a>
<h1 id="查看修改的文件记录"><a href="#查看修改的文件记录" class="headerlink" title="查看修改的文件记录"></a>查看修改的文件记录</h1><p>svn cat – 显示特定版本的某文件内容。<br>svn list – 显示一个目录或某一版本存在的文件列表。<br>svn log – 显示svn 的版本log，含作者、日期、路径等。<br>svn diff – 显示特定修改的行级详细信息。</p>
<p><strong>list示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn list http://svn.test.com/svn     #查看目录中的文件。</div><div class="line">svn list -v http://svn.test.com/svn  #查看详细的目录的信息(修订人,版本号,文件大小等)。</div><div class="line">svn list [-v]                        #查看当前当前工作拷贝的版本库URL。</div></pre></td></tr></table></figure></p>
<p><strong>cat示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn cat -r 4 test.c     #查看版本4中的文件test.c的内容,不进行比较。</div></pre></td></tr></table></figure></p>
<p><strong>diff示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">svn diff               #什么都不加，会坚持本地代码和缓存在本地.svn目录下的信息的不同;信息太多，没啥用处。</div><div class="line">svn diff -r 3          #比较你的本地代码和版本号为3的所有文件的不同。</div><div class="line">svn diff -r 3 text.c   #比较你的本地代码和版本号为3的text.c文件的不同。</div><div class="line">svn diff -r 5:6        #比较版本5和版本6之间所有文件的不同。</div><div class="line">svn diff -r 5:6 text.c #比较版本5和版本6之间的text.c文件的变化。</div><div class="line">svn diff -c 6 test.c    #比较版本5和版本6之间的text.c文件的变化。</div><div class="line">svn diff file --diff-cmd=meld  # 用meld工具查看变化。</div></pre></td></tr></table></figure></p>
<p><strong>log示例</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">svn log         #什么都不加会显示所有版本commit的日志信息:版本、作者、日期、comment。</div><div class="line">svn log -r 4:20 #只看版本4到版本20的日志信息，顺序显示。</div><div class="line">svn log -r 20:5 #显示版本20到4之间的日志信息，逆序显示。</div><div class="line">svn log test.c  #查看文件test.c的日志修改信息。</div><div class="line">svn log -r 8 -v #显示版本8的详细修改日志，包括修改的所有文件列表信息。</div><div class="line">svn log -r 8 -v -q   #显示版本8的详细提交日志，不包括comment。</div><div class="line">svn log -v -r 88:866 #显示从版本88到版本866之间，当前代码目录下所有变更的详细信息 。</div><div class="line">svn log -v dir  #查看目录的日志修改信息,需要加v。</div><div class="line">svn log http://foo.com/svn/trunk/code/  #显示代码目录的日志信息。</div></pre></td></tr></table></figure></p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>svn add file|dir – 添加文件或整个目录<br>svn checkout – 获取svn代码<br>svn commit  – 提交本地修改代码<br>svn status    – 查看本地修改代码情况：修改的或本地独有的文件详细信息(svn st -q)<br>svn merge   – 合并svn和本地代码<br>svn revert   – 撤销本地修改代码<br>svn resolve – 合并冲突代码<br>svn help [command] – 查看svn帮助，或特定命令帮助</p>
<h1 id="svn-diff个性化定制"><a href="#svn-diff个性化定制" class="headerlink" title="svn diff个性化定制"></a>svn diff个性化定制</h1><p>meld是一个GUI的文本比较工具，比SVN自带的diff工具要好用很多。如何使用meld来替代SVN自带的diff呢？方法如下： </p>
<ol>
<li><p>安装好meld</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install Caskroom/cask/meld</div></pre></td></tr></table></figure>
</li>
<li><p>编辑~/.subversion目录下的config文件，将meld赋值给diff-cmd，如下所示： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">###   Set diff-cmd to the absolute path of your &apos;diff&apos; program. </div><div class="line">###   This will override the compile-time default, which is to use </div><div class="line">###   Subversion&apos;s internal diffimplementation. </div><div class="line">diff-cmd = meld</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> SVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> svn commands </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++构造函数调用构造函数问题]]></title>
      <url>http://czlitony.github.io/2017/02/06/2017-02-06-delegating-constructors/</url>
      <content type="html"><![CDATA[<p>C++中在构造函数中调用另外一个构造函数来对成员变量进行初始化是错误的，这种方式无法正常初始化变量</p>
<a id="more"></a>
<p>直接看例子吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">class Test</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    int m_a;</div><div class="line"></div><div class="line">    Test(int a) : m_a(a) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Test() &#123;</div><div class="line">        Test(1); //wrong</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">int main(int argc, char* argv[]) &#123;</div><div class="line">    Test var;</div><div class="line">    std::cout &lt;&lt; var.m_a &lt;&lt; std::endl;</div><div class="line"></div><div class="line">    system(&quot;pause&quot;);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在该例中，试图调用Test(1)来对m_a进行初始化， 这个时候Test(1)产生的是临时对象，其地址和当前的对象不同， 所以想用这种方法来对变量进行初始化会失败， var.m_a是未定义的。</p>
<p>那么怎么初始化呢？</p>
<h2 id="placement-new"><a href="#placement-new" class="headerlink" title="placement new"></a>placement new</h2><p>它的作用是在已分配的原始内存中初始化一个对象，它与operator new的其他版本不同之处在于它并不分配内存。注意这种方法是危险的做法！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Test</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    int m_a;</div><div class="line"></div><div class="line">    Test(int a) : m_a(a) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Test() &#123;</div><div class="line">        new(this) Test(1);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="delegating-constructors"><a href="#delegating-constructors" class="headerlink" title="delegating constructors"></a>delegating constructors</h2><p>C++11引入了委托构造函数， 这样就可以调用另外的构造函数来进行初始化了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Test</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    int m_a;</div><div class="line"></div><div class="line">    Test(int a) : m_a(a) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Test() : Test(1) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C++11 </tag>
            
            <tag> delegating constructors </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shared_ptr陷阱]]></title>
      <url>http://czlitony.github.io/2017/01/01/2017-01-01-shared_ptr-traps/</url>
      <content type="html"><![CDATA[<p>本文主要介绍C++11中的shared_ptr在使用的过程中容易出现的错误用法。</p>
<a id="more"></a>
<h2 id="不要把一个原生指针给多个shared-ptr管理"><a href="#不要把一个原生指针给多个shared-ptr管理" class="headerlink" title="不要把一个原生指针给多个shared_ptr管理"></a>不要把一个原生指针给多个shared_ptr管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int* ptr = new int();</div><div class="line">std::shared_ptr&lt;int&gt; sp1(ptr);</div><div class="line">std::shared_ptr&lt;int&gt; sp2(ptr);</div></pre></td></tr></table></figure>
<p>ptr对象被析构了2次</p>
<h2 id="不要把this指针赋值给shared-ptr"><a href="#不要把this指针赋值给shared-ptr" class="headerlink" title="不要把this指针赋值给shared_ptr"></a>不要把this指针赋值给shared_ptr</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Test &#123;</div><div class="line">public:</div><div class="line">    void do_something() &#123;</div><div class="line">        m_sp = std::shared_ptr&lt;Test&gt;(this);</div><div class="line">    &#125;;  </div><div class="line">private:</div><div class="line">    std::shared_ptr&lt;Test&gt; m_sp;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Test* t = new Test();</div><div class="line">std::shared_ptr&lt;Test&gt; local_sp(t);</div><div class="line">local_sp-&gt;do_something();</div></pre></td></tr></table></figure>
<p>t被析构了两次!!<br>被shared_ptr管理的对象在内部需要传递this指针的时候需要采用如下的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Test : public std::enable_shared_from_this&lt;Test&gt; &#123;</div><div class="line">public:</div><div class="line">    void do_something() &#123;</div><div class="line">        m_sp = std::shared_ptr&lt;Test&gt;(shared_from_this());</div><div class="line">    &#125;;  </div><div class="line">private:</div><div class="line">    std::shared_ptr&lt;Test&gt; m_sp;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="shared-ptr作为被保护的对象的成员时，小心因循环引用造成无法释放资源"><a href="#shared-ptr作为被保护的对象的成员时，小心因循环引用造成无法释放资源" class="headerlink" title="shared_ptr作为被保护的对象的成员时，小心因循环引用造成无法释放资源"></a>shared_ptr作为被保护的对象的成员时，小心因循环引用造成无法释放资源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class B;</div><div class="line">class A &#123;</div><div class="line">public:</div><div class="line">    std::shared_ptr&lt;B&gt; m_b;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">class B &#123;</div><div class="line">public:</div><div class="line">    std::shared_ptr&lt;A&gt; m_a;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">void test3() &#123;</div><div class="line">    while (true)</div><div class="line">    &#123;</div><div class="line">        std::shared_ptr&lt;A&gt; a(new A);</div><div class="line">        std::shared_ptr&lt;B&gt; b(new B);</div><div class="line">        a-&gt;m_b = b;</div><div class="line">        b-&gt;m_a = a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>两个shared_ptr对象互相引用的时候容易导致内存无法释放，解决措施为其中一个用weak_ptr：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class B;</div><div class="line">class A &#123;</div><div class="line">public:</div><div class="line">    std::weak_ptr&lt;B&gt; m_b;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">class B &#123;</div><div class="line">public:</div><div class="line">    std::shared_ptr&lt;A&gt; m_a;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="不要在函数实参里创建shared-ptr"><a href="#不要在函数实参里创建shared-ptr" class="headerlink" title="不要在函数实参里创建shared_ptr"></a>不要在函数实参里创建shared_ptr</h2><p>下面的代码有内存泄漏的危险<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 声明</div><div class="line">void f(A *p1, B *p2);</div><div class="line">// 使用</div><div class="line">f(new A, new B);</div></pre></td></tr></table></figure></p>
<p>假如new A先于new B发生(因为C++的函数参数的计算顺序是不确定的)，那么如果new B抛出异常，那么new A分配的内存将会发生泄漏。<br>学过shared_ptr之后我们或许会尝试如下方法”解决”该问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 声明</div><div class="line">void f(shared_ptr&lt;A&gt; p1, shared_ptr&lt;B&gt; p2);</div><div class="line">// 使用</div><div class="line">f(shared_ptr&lt;A&gt;(new A), shared_ptr&lt;B&gt;(new B));</div></pre></td></tr></table></figure></p>
<p>可惜，这么写依然有可能发生内存泄漏，因为两个shared_ptr的构造有可能发生在new A与new B之后。</p>
<p>若这么调用f：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f(make_shared&lt;A&gt;(), make_shared&lt;B&gt;());</div></pre></td></tr></table></figure></p>
<p>那么就不可能发生内存泄漏了，与上面用new来初始化的情形对比，make_shared保证了第二new发生的时候，第一个new所分配的资源已经被shared_ptr管理起来了，故在异常发生时，能正确释放资源。</p>
<p>一句话建议：总是使用make_shared来生成shared_ptr！</p>
<p>另外的例子：<br>function(shared_ptr<int>(new int), g());<br>可能的过程是先 new int, 然后调 g(), g()发生异常, shared_ptr<int> 没有创建, int内存泄露<br>推荐写法:<br>shared_ptr<int> p(new int());<br>f(p, g());</int></int></int></p>
<h2 id="weak-ptr在使用前需要检查合法性"><a href="#weak-ptr在使用前需要检查合法性" class="headerlink" title="weak_ptr在使用前需要检查合法性"></a>weak_ptr在使用前需要检查合法性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">std::weak_ptr&lt;int&gt; wp;</div><div class="line">&#123;</div><div class="line">    std::shared_ptr&lt;int&gt; sp(new int(1)); //sp.use_count()==1</div><div class="line">    wp = sp; //wp不会改变引用计数，所以sp.use_count()==1</div><div class="line">    std::shared_ptr&lt;int&gt; sp_ok = wp.lock(); //wp没有重载-&gt;操作符。只能这样取所指向的对象</div><div class="line">&#125;</div><div class="line">std::shared_ptr&lt;int&gt; sp_null = wp.lock(); //sp_null.use_count()==0;</div></pre></td></tr></table></figure>
<p>因为上述代码中sp和sp_ok离开了作用域，其容纳的K对象已经被释放了。<br>得到了一个容纳NULL指针的sp_null对象。在使用wp前需要调用wp.expired()函数判断一下。<br>因为wp还仍旧存在，虽然引用计数等于0，仍有某处“全局”性的存储块保存着这个计数信息。<br>直到最后一个weak_ptr对象被析构，这块“堆”存储块才能被回收。否则weak_ptr无法直到自己<br>所容纳的那个指针资源的当前状态。</p>
<h2 id="不要new-shared-ptr"><a href="#不要new-shared-ptr" class="headerlink" title="不要new shared_ptr"></a>不要new shared_ptr<t></t></h2><p>本来shared_ptr就是为了管理指针资源的，不要又引入一个需要管理的指针资源shared_ptr<t>*</t></p>
<h2 id="尽量不要get"><a href="#尽量不要get" class="headerlink" title="尽量不要get"></a>尽量不要get</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">class Base &#123;</div><div class="line">public:</div><div class="line">    virtual ~Base() &#123;&#125;;</div><div class="line">&#125;;</div><div class="line">class Derived : public Base &#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">std::shared_ptr&lt;Base&gt; sp(new Derived); //通过隐式转换，储存D的指针。</div><div class="line">Base* b = sp.get(); //shared_ptr辛辛苦苦隐藏的原生指针就这么被刨出来了。</div><div class="line">Derived* d = dynamic_cast&lt;Derived*&gt;(b); //这是使用get的正当理由吗</div></pre></td></tr></table></figure>
<p>正确的做法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">std::shared_ptr&lt;Base&gt; spb(new Derived) ;</div><div class="line">std::shared_ptr&lt;Derived&gt; spd = std::dynamic_pointer_cast&lt;Derived&gt;(spb); //变成子类的指针</div></pre></td></tr></table></figure></p>
<p>另一个同get相关的错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shared_ptr&lt;T&gt; sp(new T);</div><div class="line">shared_ptr&lt;T&gt; sp2(sp.get());//指针会析构2次而错误</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shared_ptr </tag>
            
            <tag> C++11 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vim命令]]></title>
      <url>http://czlitony.github.io/2016/08/02/2016-08-02-vim/</url>
      <content type="html"><![CDATA[<p>这一部分主要介绍vim常用用法。</p>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Vim（Vi[Improved]）编辑器是功能强大的跨平台文本文件编辑工具，继承自Unix系统的Vi编辑器，支持Linux/Mac OS X/Windows系统，利用它可以建立、修改文本文件。进入Vim编辑程序，可以在终端输入下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim [filename]</div></pre></td></tr></table></figure></p>
<p>其中filename是要编辑器的文件的路径名。如果文件不存在，它将为你建立一个新文件。Vim编辑程序有三种操作模式，分别称为<strong>普通模式</strong>、<strong>插入模式</strong> 、 <strong>命令模式</strong> 和 <strong>可视模式</strong>，当运行Vim时，首先进入普通模式。</p>
<h2 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h2><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">k                上移；</div><div class="line">j                下移；</div><div class="line">h                左移；</div><div class="line">l                右移；</div><div class="line">ctrl+f        	 在文件中前移一页（相当于 page down）；</div><div class="line">ctrl+b           在文件中后移一页（相当于 page up）；</div><div class="line">*                当光标停留在一个单词上，该键会在文件内搜索该单词，并跳转到下一处；</div><div class="line">#                当光标停留在一个单词上，该键在文件内搜索该单词，并跳转到上一处；</div><div class="line">gg               将光标定位到文件第一行起始位置；</div><div class="line">G                将光标定位到文件最后一行起始位置；</div><div class="line">NG/Ngg           将光标定位到第 N 行的起始位置。</div><div class="line">H                将光标移到屏幕上的起始行（或最上行）；</div><div class="line">M                将光标移到屏幕中间；</div><div class="line">L                将光标移到屏幕最后一行;</div><div class="line">w                右移光标到下一个字的开头；</div><div class="line">e                右移光标到一个字的末尾；</div><div class="line">b                左移光标到前一个字的开头；</div><div class="line">0                数字０，左移光标到本行的开始；</div><div class="line">$                右移光标，到本行的末尾；</div><div class="line">^                移动光标，到本行的第一个非空字符。</div></pre></td></tr></table></figure>
<h3 id="搜索匹配"><a href="#搜索匹配" class="headerlink" title="搜索匹配"></a>搜索匹配</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/str1            正向搜索字符串 str1；</div><div class="line">n                继续搜索，找出 str1 字符串下次出现的位置；</div><div class="line">N                继续搜索，找出 str1 字符串上一次出现的位置；</div><div class="line">?str2            反向搜索字符串 str2 。</div></pre></td></tr></table></figure>
<p>搜索时忽略大小写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">:set ignorecase  忽略大小写</div><div class="line">:set noignorecase大小写敏感</div><div class="line">/\cstr1          忽略大小写</div><div class="line">/\Cstr1          大小写敏感</div></pre></td></tr></table></figure></p>
<h3 id="替换和删除"><a href="#替换和删除" class="headerlink" title="替换和删除"></a>替换和删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">x                删除光标所指向的当前字符；</div><div class="line">dw               删除光标右侧的字；</div><div class="line">db               删除光标左侧的字；</div><div class="line">dd               删除光标所在行，并去除空隙；</div><div class="line">ndd              删除（剪切） n 行内容，并去除空隙；</div><div class="line">d$               从当前光标起删除字符直到行的结束；</div><div class="line">d0               从当前光标起删除字符直到行的开始；</div><div class="line">J                删除本行的回车符（CR），并和下一行合并；</div><div class="line">s                用输入的正文替换光标所指向的字符；</div><div class="line">S                删除当前行，并进入插入模式；</div><div class="line">c$               用输入的正文替换从光标开始到本行末尾的所有字符；</div><div class="line">c0               用输入的正文替换从本行开头到光标的所有字符。</div></pre></td></tr></table></figure>
<h3 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p                小写字母 p，将缓冲区的内容粘贴到光标的后面；</div><div class="line">P                大写字母 P，将缓冲区的内容粘贴到光标的前面；</div><div class="line">yy               复制当前行到内存缓冲区；</div><div class="line">nyy              复制 n 行内容到内存缓冲区；</div></pre></td></tr></table></figure>
<h3 id="撤销和重复"><a href="#撤销和重复" class="headerlink" title="撤销和重复"></a>撤销和重复</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">u                撤消前一条命令的结果；</div><div class="line">.                重复最后一条修改正文的命令。</div></pre></td></tr></table></figure>
<h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><h3 id="进入插入模式"><a href="#进入插入模式" class="headerlink" title="进入插入模式"></a>进入插入模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">i            	 在光标左侧插入正文;</div><div class="line">a            	 在光标右侧插入正文;</div><div class="line">o            	 在光标所在行的下一行增添新行;</div><div class="line">O            	 在行的上一行增添新行;</div><div class="line">I            	 在行的开头插入;</div><div class="line">A            	 在行的末尾插入。</div></pre></td></tr></table></figure>
<h3 id="退出插入模式"><a href="#退出插入模式" class="headerlink" title="退出插入模式"></a>退出插入模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ESC </div><div class="line">Ctrl+[</div></pre></td></tr></table></figure>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="打开、保存、退出"><a href="#打开、保存、退出" class="headerlink" title="打开、保存、退出"></a>打开、保存、退出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">:e file_temp	 在已经启动的Vim中打开一个文件;</div><div class="line">:q               在未作修改的情况下退出；</div><div class="line">:q!              放弃所有修改，退出编辑程序；</div><div class="line">:w               保存；</div><div class="line">:w file_temp	 将当前文件另存为 file_temp。</div></pre></td></tr></table></figure>
<h3 id="行号与文件"><a href="#行号与文件" class="headerlink" title="行号与文件"></a>行号与文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:n               将光标移到第 n 行</div></pre></td></tr></table></figure>
<h3 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h3><p>Vim 在编辑某个文件时，会另外生成一个临时文件，这个文件的名称通常以 . 开头，并以 .swp 结尾。Vim 在正常退出时，该文件被删除，若意外退出，而没有保存文件的最新修改内容，则可以使用恢复命令 :recover 来恢复文件，也可以在启动Vim时用 -r 选项。</p>
<h3 id="选项设置"><a href="#选项设置" class="headerlink" title="选项设置"></a>选项设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">autoindent       设置该选项，则正文自动缩进;</div><div class="line">ignorecase       设置该选项，则忽略规则表达式中大小写字母的区别;</div><div class="line">number           设置该选项，则显示正文行号;</div><div class="line">ruler            设置该选项，则在屏幕底部显示光标所在行、列的位置;</div><div class="line">tabstop          设置按 Tab 键跳过的空格数。例如 :set tabstop=n，n 默认值为 8。</div></pre></td></tr></table></figure>
<h3 id="Shell切换"><a href="#Shell切换" class="headerlink" title="Shell切换"></a>Shell切换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:!shell_command 执行完 shell_command 后回到Vim</div></pre></td></tr></table></figure>
<h2 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">v               进入,一个字符一个字符地选;</div><div class="line">V               进入，一行一行地选;</div><div class="line">ctrl-v          进入，选中屏幕上的一个矩形区域;</div><div class="line">d               删除所选中的部分;</div><div class="line">D               删除所选中部分所在的行;</div><div class="line">y               复制选中的部分;</div><div class="line">Y               复制选中部分所在的行;</div><div class="line">&gt;               所选中的部分都缩进一个tab;</div><div class="line">=               在所选中的部分删除一个tab的缩进;</div><div class="line">c               会把选中的内容删除并进入插入模式;</div><div class="line">C               会直接删除选中的内容所在的行并进入插入模式。</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> vim </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux基础]]></title>
      <url>http://czlitony.github.io/2016/08/02/2016-08-02-linux-abc/</url>
      <content type="html"><![CDATA[<p>这一部分主要介绍Linux常用命令工具，比如文件管理、文本处理等。</p>
<a id="more"></a>
<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h3 id="查看命令的简要说明"><a href="#查看命令的简要说明" class="headerlink" title="查看命令的简要说明"></a>查看命令的简要说明</h3><ul>
<li>简要说明命令的作用（显示命令所处的man分类页面: <code>whatis command</code></li>
<li>正则匹配: <code>whatis -w &quot;loca*&quot;</code></li>
<li>更加详细的说明文档: <code>info command</code></li>
</ul>
<h3 id="使用man"><a href="#使用man" class="headerlink" title="使用man"></a>使用man</h3><h4 id="查询命令command的说明文档"><a href="#查询命令command的说明文档" class="headerlink" title="查询命令command的说明文档:"></a>查询命令command的说明文档:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">man command</div></pre></td></tr></table></figure>
<h4 id="man页面所属的分类标识-常用的是分类1和分类3"><a href="#man页面所属的分类标识-常用的是分类1和分类3" class="headerlink" title="man页面所属的分类标识(常用的是分类1和分类3)"></a>man页面所属的分类标识(常用的是分类1和分类3)</h4><ol>
<li>用户可以操作的命令或者是可执行文件</li>
<li>系统核心可调用的函数与工具等</li>
<li>一些常用的函数与数据库</li>
<li>设备文件的说明</li>
<li>设置文件或者某些文件的格式</li>
<li>游戏</li>
<li>惯例与协议等。例如Linux标准文件系统、网络协议、ASCⅡ，码等说明内容</li>
<li>系统管理员可用的管理条令</li>
<li>与内核有关的文件</li>
</ol>
<p>前面说到使用whatis会显示命令所在的具体的文档类别，我们学习如何使用它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$whatis printf</div><div class="line">printf (1)           - format and print data</div><div class="line">printf (3)           - formatted output conversion</div></pre></td></tr></table></figure></p>
<p>我们看到printf在分类1和分类3中都有,分类1中的页面是命令操作及可执行文件的帮助,而3是常用函数库说明,如果我们想看的是C语言中printf的用法，可以指定查看分类3的帮助：<code>man 3 printf</code></p>
<h4 id="查询关键字"><a href="#查询关键字" class="headerlink" title="查询关键字"></a>查询关键字</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">man -k keyword</div></pre></td></tr></table></figure>
<p>eg：查找GNOME的config配置工具命令: <code>man -k GNOME config| grep 1</code></p>
<h3 id="查看路径"><a href="#查看路径" class="headerlink" title="查看路径"></a>查看路径</h3><h4 id="查看程序的binary文件所在路径"><a href="#查看程序的binary文件所在路径" class="headerlink" title="查看程序的binary文件所在路径:"></a>查看程序的binary文件所在路径:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">which command</div></pre></td></tr></table></figure>
<p>eg:查找make程序安装路径: <code>which make</code></p>
<h4 id="查看程序的搜索路径"><a href="#查看程序的搜索路径" class="headerlink" title="查看程序的搜索路径:"></a>查看程序的搜索路径:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whereis command</div></pre></td></tr></table></figure>
<p>当系统中安装了同一软件的多个版本时，不确定使用的是哪个版本时，这个命令就能派上用场。</p>
<h3 id="快速查看命令用法"><a href="#快速查看命令用法" class="headerlink" title="快速查看命令用法"></a>快速查看命令用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">command --help</div></pre></td></tr></table></figure>
<hr>
<h2 id="文件及目录管理"><a href="#文件及目录管理" class="headerlink" title="文件及目录管理"></a>文件及目录管理</h2><h3 id="创建和删除"><a href="#创建和删除" class="headerlink" title="创建和删除"></a>创建和删除</h3><ul>
<li>创建： <code>mkdir</code></li>
<li>删除： <code>rm</code></li>
<li>删除非空目录： <code>rm -rf file目录</code></li>
<li>删除日志: <code>rm *log</code> (等价: $find ./ -name “*log” -exec rm {} ;)</li>
<li>移动： <code>mv</code></li>
<li>复制： <code>cp</code> (复制目录：cp -r )</li>
<li>查看当前目录下文件个数: <code>find ./ | wc -l</code></li>
<li>复制目录: <code>cp -r source_dir  dest_dir</code></li>
</ul>
<h3 id="目录切换"><a href="#目录切换" class="headerlink" title="目录切换"></a>目录切换</h3><ul>
<li>更改当前工作路径为path: <code>cd path</code></li>
<li>切换到上一个工作目录： <code>cd -</code></li>
<li>切换到home目录： <code>cd or cd ~</code></li>
<li>显示当前路径: <code>pwd</code></li>
</ul>
<h3 id="列出目录项"><a href="#列出目录项" class="headerlink" title="列出目录项"></a>列出目录项</h3><ul>
<li>显示当前目录下的文件: <code>ls</code></li>
<li><p>按时间排序，以列表的方式显示目录项: <code>ls -lrt</code><br>  以上这个命令用到的频率如此之高，以至于我们需要为它建立一个快捷命令方式:<br>  在.bashrc 中设置命令别名:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias lsl=&apos;ls -lrt&apos;</div><div class="line">alias lm=&apos;ls -al|more&apos;</div></pre></td></tr></table></figure>
<p>  这样，使用lsl，就可以显示目录中的文件按照修改时间排序；以列表方式显示；</p>
</li>
<li><p>给每项文件前面增加一个id编号(看上去更加整洁): <code>ls | cat -n</code><br>注：.bashrc 在/home/你的用户名/ 文件夹下，以隐藏文件的方式存储；可使用 ls -a 查看。</p>
</li>
</ul>
<h3 id="查找目录及文件find-locate"><a href="#查找目录及文件find-locate" class="headerlink" title="查找目录及文件find/locate"></a>查找目录及文件find/locate</h3><ul>
<li>搜寻文件或目录: <code>find ./ -name &quot;core*&quot; | xargs file</code></li>
<li>查找目标文件夹中是否有obj文件: <code>find ./ -name &#39;*.o&#39;</code></li>
<li>递归当前目录及子目录删除所有.o文件:<code>find ./ -name &quot;*.o&quot; -exec rm {} \;</code></li>
</ul>
<p>find是实时查找，如果需要更快的查询，可试试locate；locate会为文件系统建立索引数据库，如果有文件更新，需要定期执行更新命令来更新索引库:</p>
<ul>
<li>寻找包含有string的路径: <code>locate string</code></li>
<li>与find不同，locate并不是实时查找。你需要更新数据库，以获得最新的文件索引信息: <code>sudo updatedb</code></li>
</ul>
<h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><ul>
<li>查看文件： <code>cat vi head tail more</code></li>
<li>显示时同时显示行号: <code>cat -n</code></li>
<li>按页显示列表内容: <code>ls -al | more</code></li>
<li>只看前10行: <code>head -10 **</code></li>
<li>显示文件第一行: <code>head -1 filename</code></li>
<li>显示文件倒数第五行: <code>tail -5 filename</code></li>
<li>查看两个文件间的差别: <code>diff file1 file2</code></li>
<li>动态显示文本最新信息: <code>tail -f crawler.log</code></li>
</ul>
<h3 id="文件与目录权限修改"><a href="#文件与目录权限修改" class="headerlink" title="文件与目录权限修改"></a>文件与目录权限修改</h3><ul>
<li>改变文件的拥有者: <code>chown</code></li>
<li>改变文件读、写、执行等属性: <code>chmod</code></li>
<li>递归子目录修改： <code>chown -R tuxapp source/</code></li>
<li>增加脚本可执行权限： <code>chmod a+x myscript</code></li>
</ul>
<h3 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h3><ul>
<li>批处理命令连接执行，使用： <code>|</code></li>
<li>串联使用分号： <code>;</code></li>
<li>前面成功，则执行后面一条，否则，不执行: <code>&amp;&amp;</code></li>
<li>前面失败，则后一条执行: <code>||</code>, 如 <code>ls /proc &amp;&amp; echo  suss! || echo failed</code></li>
<li>重定向: <code>ls  proc/*.c &gt; list 2&gt;&amp;l</code> 将标准输出和标准错误重定向到同一文件(&gt;&gt;是追加，&gt;是覆盖)</li>
<li>等价的是: <code>ls  proc/*.c &amp;&gt; list</code></li>
<li>清空文件: <code>:&gt; a.txt</code></li>
<li>重定向: <code>echo aa &gt;&gt; a.txt</code></li>
</ul>
<h3 id="Bash快捷输入或删除"><a href="#Bash快捷输入或删除" class="headerlink" title="Bash快捷输入或删除"></a>Bash快捷输入或删除</h3><ul>
<li>Ctl-U   删除光标到行首的所有字符,在某些设置下,删除全行</li>
<li>Ctl-W   删除当前光标到前边的最近一个空格之间的字符</li>
<li>Ctl-H   backspace,删除光标前边的字符</li>
<li>Ctl-R   匹配最相近的一个文件，然后输出</li>
</ul>
<h3 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h3><p>查找record.log中包含AAA，但不包含BBB的记录的总数: <code>cat -v record.log | grep AAA | grep -v BBB | wc -l</code><br>统计某个目录下某种文件的总函数： <code>find /home/tony/phonehome/ -name &quot;*.xsl&quot; |xargs cat|wc -l</code></p>
<hr>
<h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java DOM生成xml文件]]></title>
      <url>http://czlitony.github.io/2016/07/26/2016-07-26-java-DOM-create-xml/</url>
      <content type="html"><![CDATA[<p>我们不仅可以使用DOM的方式解析XML文件，同时也可以使用DOM的方式生成XML文件。本文主要内容是使用DOM的方式生成XML文件。</p>
<a id="more"></a>
<p>首先是创建DOM之中的各个节点，然后按照各自的层次添加这些节点。<br>DomCreateDoucment.java文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">package com.app.dom;</div><div class="line"></div><div class="line">import java.io.File;</div><div class="line">import java.io.FileOutputStream;</div><div class="line"></div><div class="line">import javax.xml.parsers.DocumentBuilder;</div><div class="line">import javax.xml.parsers.DocumentBuilderFactory;</div><div class="line">import javax.xml.transform.OutputKeys;</div><div class="line">import javax.xml.transform.Transformer;</div><div class="line">import javax.xml.transform.TransformerFactory;</div><div class="line">import javax.xml.transform.dom.DOMSource;</div><div class="line">import javax.xml.transform.stream.StreamResult;</div><div class="line"></div><div class="line">import org.w3c.dom.Document;</div><div class="line">import org.w3c.dom.Element;</div><div class="line">import org.w3c.dom.Text;</div><div class="line"></div><div class="line">public class DomCreateDoucment &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) throws Exception &#123;</div><div class="line"></div><div class="line">		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</div><div class="line">		DocumentBuilder builder = factory.newDocumentBuilder();</div><div class="line">		Document doc = builder.newDocument();</div><div class="line">		//构建XML中的节点</div><div class="line">		Element root = doc.createElement(&quot;font&quot;);</div><div class="line">		Element nameElement = doc.createElement(&quot;name&quot;);</div><div class="line">		Text nameValue = doc.createTextNode(&quot;san&quot;);</div><div class="line">		Element sizeElement = doc.createElement(&quot;size&quot;);</div><div class="line">		sizeElement.setAttribute(&quot;unit&quot;, &quot;px&quot;);</div><div class="line">		Text sizeValue = doc.createTextNode(&quot;14&quot;);</div><div class="line">       //按顺序添加各个节点</div><div class="line">		doc.appendChild(root);</div><div class="line">		root.appendChild(nameElement);</div><div class="line">		nameElement.appendChild(nameValue);</div><div class="line">		root.appendChild(sizeElement);</div><div class="line">		sizeElement.appendChild(sizeValue);</div><div class="line">		</div><div class="line">		Transformer t=TransformerFactory.newInstance().newTransformer();</div><div class="line">		//设置换行和缩进</div><div class="line">		t.setOutputProperty(OutputKeys.INDENT,&quot;yes&quot;);</div><div class="line">		t.setOutputProperty(OutputKeys.METHOD, &quot;xml&quot;);</div><div class="line">		t.transform(new DOMSource(doc), new StreamResult(new FileOutputStream(new File(&quot;text.xml&quot;))));</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译：<br>在该文件所在目录下执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -d . DomCreateDoucment.java</div></pre></td></tr></table></figure></p>
<p>执行成功的话会在当前路径下生成:com/app/dom/DomCreateDoucment.class</p>
<p>执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java com.app.dom.DomCreateDoucment</div></pre></td></tr></table></figure></p>
<p>结果：<br>在当前路径下生成text.xml文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</div><div class="line">&lt;font&gt;</div><div class="line">&lt;name&gt;san&lt;/name&gt;</div><div class="line">&lt;size unit=&quot;px&quot;&gt;14&lt;/size&gt;</div><div class="line">&lt;/font&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> XML， DOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JDBC远程连接MySql]]></title>
      <url>http://czlitony.github.io/2016/07/22/2016-07-22-jdbc-remote-connect-mysql/</url>
      <content type="html"><![CDATA[<p>本文主要内容是开启MySql数据库的远程连接功能，然后远程通过JDBC来连接上数据库，进行简单的查询操作。</p>
<a id="more"></a>
<h2 id="开启mysql远程连接功能"><a href="#开启mysql远程连接功能" class="headerlink" title="开启mysql远程连接功能"></a>开启mysql远程连接功能</h2><p>mysql默认的远程连接功能貌似是关闭的，如果需要远程连接的话需要开通。开通的过程分为以下几步：</p>
<h3 id="进入"><a href="#进入" class="headerlink" title="进入"></a>进入</h3><p>在控制台输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure></p>
<p>执行命令后会提示输入密码，一般不需要输入，直接回车即可。</p>
<h3 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h3><p>接着第1步，继续输入以下指令，注意；不要省略：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use mysql;</div><div class="line">select host,user,password from user;</div></pre></td></tr></table></figure></p>
<p>然后控制台会输出当前db的一些用户信息，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">MariaDB [mysql]&gt; select host,user,password from user;</div><div class="line">+-----------+-------------+-------------------------------------------+</div><div class="line">| host      | user        | password                                  |</div><div class="line">+-----------+-------------+-------------------------------------------+</div><div class="line">| localhost | root        |                                           |</div><div class="line">| (none)    | root        |                                           |</div><div class="line">| 127.0.0.1 | root        |                                           |</div><div class="line">| ::1       | root        |                                           |</div><div class="line">| localhost |             |                                           |</div><div class="line">| (none)    |             |                                           |</div><div class="line">| %         | replication | *51125B3597BEE0FC43E0BCBFEE002EF8641B44CF |</div><div class="line">| localhost | DbAdmin     | *0DF17D910FD01DCE47EC3F384C33306F50E8CE54 |</div><div class="line">| %         | root        | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</div><div class="line">+-----------+-------------+-------------------------------------------+</div></pre></td></tr></table></figure></p>
<p>password栏为空的一般都是不用密码的，有内容的是加密后的密码。下面第三步增加可以远程访问该db的用户。</p>
<h3 id="增加用户"><a href="#增加用户" class="headerlink" title="增加用户"></a>增加用户</h3><p><strong>grant命令：</strong><br> grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘连接口令’;</p>
<p>如果使任何主机都能以root用户，password为密码连接的话就输入以下命令(命令不区分大小写)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GRANT ALL PRIVILEGES ON *.* TO root@&quot;%&quot; IDENTIFIED BY &quot;password&quot;;</div></pre></td></tr></table></figure></p>
<p>为了使设置生效，输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flush privileges;</div></pre></td></tr></table></figure></p>
<p>至此就可以远程连接了，注意用户名=root，密码=password.</p>
<h2 id="JDBC远程连接MySql数据库"><a href="#JDBC远程连接MySql数据库" class="headerlink" title="JDBC远程连接MySql数据库"></a>JDBC远程连接MySql数据库</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>啥都不说了，看代码吧，PersonalBookmarks.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">import java.sql.DriverManager;</div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.sql.Connection;</div><div class="line">import java.sql.Statement;</div><div class="line"> </div><div class="line">public class PersonalBookmarks &#123;</div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        Connection conn = null;</div><div class="line">        String sql;</div><div class="line"></div><div class="line">        // MySql jdbc url format: jdbc:mysql://host:port/database_name?param=value</div><div class="line">        // Set useUnicode and characterEncoding to avoid messy code</div><div class="line">        String url = &quot;jdbc:mysql://10.103.62.159:3306/bookmarks?&quot;</div><div class="line">            + &quot;user=root&amp;password=password&amp;useUnicode=true&amp;characterEncoding=UTF8&quot;; //这个url里面设置所要访问的数据库所在的主机以及所要访问的数据库，还有用户名和密码，这个用户名密码就是上面设置的</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            // Load MySql driver.Each of those three ways is fine.</div><div class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</div><div class="line">            // or:</div><div class="line">            // com.mysql.jdbc.Driver driver = new com.mysql.jdbc.Driver();</div><div class="line">            // or：</div><div class="line">            // new com.mysql.jdbc.Driver();</div><div class="line"></div><div class="line">            //for test</div><div class="line">            System.out.println(&quot;Load MySQL Driver successfully!&quot;);</div><div class="line"></div><div class="line">            // One Connection repersents a database connection.</div><div class="line">            conn = DriverManager.getConnection(url);</div><div class="line"></div><div class="line">            // There are many functions in Statement, such as executeQuery , executeUpdate etc.</div><div class="line">            Statement stmt = conn.createStatement();</div><div class="line">            System.out.println(&quot;Connect to database successfully!&quot;);// for test</div><div class="line"></div><div class="line">            // sql = &quot;select a.url,b.clienttype from bookmarks as a,customlinks as b where a.bkmrkid=b.pslinkid&quot;;</div><div class="line">            // ResultSet data = stmt.executeQuery(sql);//Query for data</div><div class="line">            </div><div class="line">            // while (data.next()) &#123;    </div><div class="line">            //     System.out.println(data.getString(&quot;url&quot;)); // for test</div><div class="line">            //     System.out.println(data.getString(&quot;clienttype&quot;)); // for test</div><div class="line"></div><div class="line">            //     String[] temp = data.getString(&quot;url&quot;).split(&quot;:&quot;);</div><div class="line">            //     String shortcutType = temp[0];</div><div class="line">            //     String clientType = data.getString(&quot;clienttype&quot;);</div><div class="line"></div><div class="line">            //     if (shortcutTypeMap.containsKey(shortcutType) &amp;&amp; clientTypeMap.containsKey(clientType)) &#123;</div><div class="line">            //         result[shortcutTypeMap.get(shortcutType)][clientTypeMap.get(clientType)]++;</div><div class="line">            //     &#125;</div><div class="line">            // &#125;</div><div class="line">        &#125; catch (SQLException e) &#123;</div><div class="line">            System.out.println (&quot;MySQL operation mistake&quot;);</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; finally &#123;</div><div class="line">            conn.close();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="编译："><a href="#编译：" class="headerlink" title="编译："></a>编译：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac PersonalBookmarks.java</div></pre></td></tr></table></figure>
<h3 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h3><p>要想运行这段代码，需要<em>mysql-connector-java-5.1.39-bin.jar</em>这个jar包，可以去mysql官网下载，下载之后将这个jar包放在jdbc.java同一路径，<br>之后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -cp .:mysql-connector-java-5.1.39-bin.jar PersonalBookmarks</div></pre></td></tr></table></figure></p>
<p>执行后控制台看到以下输出就代表成功了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Load MySQL Driver successfully!</div><div class="line">Connect to database successfully!</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JDBC， MySql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xslt调用java类方法]]></title>
      <url>http://czlitony.github.io/2016/07/21/2016-07-21-xslt-java-function/</url>
      <content type="html"><![CDATA[<p>xslt中可以调用java的类方法，对这种引用了java方法的xslt的解析可以采用java JDK自带的 javax.xml.transform.本文对这种方法进行介绍。</p>
<a id="more"></a>
<p>主要的步骤为：</p>
<ol>
<li>编写待调用的java类<strong>静态方法</strong></li>
<li>在xsl文件的开头指定待引用的java类所在的包（如果不声明包的话，就填写类名）</li>
<li>在xsl文件中通过”<strong>前缀：类名.方法名</strong>“的方式来调用</li>
<li>用java jdk自带的javax.xml.transform类完成xslt转换</li>
</ol>
<p>本文主要是为了演示怎样在xsl中调用java的方法，所以就不用xsl去转换某个xml文件了，仅仅是解析xsl文件而已。<br>本文用到的文件有MaxMinMedium.java、Transform.java、s.xsl等。<br>原始文件组织结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">test</div><div class="line">  MaxMinMedium.java</div><div class="line">  Transform.java</div><div class="line">  s.xsl</div><div class="line">  x.xml</div></pre></td></tr></table></figure></p>
<p> <strong>声明:</strong>文中代码为说明问题所编写，不保证一定可以运行～</p>
<p> 下面进入主题：</p>
<h2 id="1-编写java类"><a href="#1-编写java类" class="headerlink" title="1. 编写java类"></a>1. 编写java类</h2><p>java相关的安装事宜可以参考这篇文章：<br><a href="https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get</a><br>为了编译java文件，首先需要安装jdk, 在ubantu上面执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install default-jdk</div></pre></td></tr></table></figure></p>
<p>如果要运行java程序需要安装jre：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install default-jre</div></pre></td></tr></table></figure></p>
<p>想要理解本方法，需要对java包有所了解，简单来说java包一定程度上充当了命名空间的角色。本文中定义的java源文件为 MaxMinMedium.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">package extensions;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.Iterator;</div><div class="line">import java.util.Collections;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class MaxMinMedium &#123;</div><div class="line">    private static ArrayList&lt;Integer&gt; valueList = new ArrayList&lt;Integer&gt;();</div><div class="line"></div><div class="line">    //reset sum and valueList</div><div class="line">    public static boolean reset() &#123;</div><div class="line">        valueList.clear();</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static boolean calc() &#123;</div><div class="line">        if(valueList.size() &gt; 0) &#123;</div><div class="line">            Collections.sort(valueList);</div><div class="line">            return true;</div><div class="line">        &#125; else &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static boolean insert(int val) &#123;</div><div class="line">        valueList.add(val);</div><div class="line"></div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static int getMax() &#123;</div><div class="line">        return valueList.get(valueList.size()-1);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    public static int getMin() &#123;</div><div class="line">        return valueList.get(0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static int getMedium() &#123;</div><div class="line">        return valueList.get(valueList.size()/2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个文件的开头package extensions是声明了一个extensions的包，在该文件所在的路径下执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac -d . MaxMinMedium.java</div></pre></td></tr></table></figure></p>
<p>将会在当前路径下产生 extensions 文件夹，在这个文件夹下会出现 MaxMinMedium.class 文件，这个就是java编译之后得到的文件。</p>
<p>可以在当前路径下新建其他的java文件，在这些源文件中均声明 package extensions，这样编译后会在extensions文件夹下出现相应的class文件。可以在这些不同的java文件中定义不同的类，各自完成相应的功能。<br>MaxMinMedium.java中的方法主要是获取一组数的最大值、最小值和中位数。</p>
<p><strong>注意：</strong>类中待调用的方法需要是静态的！</p>
<h2 id="2-在xsl文件中指定java包"><a href="#2-在xsl文件中指定java包" class="headerlink" title="2. 在xsl文件中指定java包"></a>2. 在xsl文件中指定java包</h2><p>s.xsl 内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;</div><div class="line">    xmlns:javaExt=&quot;extensions&quot;</div><div class="line">    exclude-result-prefixes=&quot;javaExt&quot;&gt;</div><div class="line">    </div><div class="line">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.insert(1)&quot; /&gt;</div><div class="line">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.insert(2)&quot; /&gt;</div><div class="line">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.insert(3)&quot; /&gt;</div><div class="line">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.insert(4)&quot; /&gt;</div><div class="line">    </div><div class="line">    &lt;xsl:if test=&quot;javaExt:MaxMinMedium.calc()&quot; /&gt;</div><div class="line">    </div><div class="line">    &lt;test&gt;</div><div class="line">        &lt;max&gt;</div><div class="line">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class="line">                &lt;xsl:value-of select=&quot;javaExt:MaxMinMedium.getMax()&quot; /&gt;</div><div class="line">            &lt;/xsl:attribute&gt;</div><div class="line">        &lt;/max&gt;</div><div class="line">        &lt;min&gt;</div><div class="line">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class="line">                &lt;xsl:value-of select=&quot;javaExt:MaxMinMedium.getMin()&quot; /&gt;</div><div class="line">            &lt;/xsl:attribute&gt;</div><div class="line">        &lt;/min&gt;</div><div class="line">        &lt;medium&gt;</div><div class="line">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class="line">                &lt;xsl:value-of select=&quot;javaExt:MaxMinMedium.getMedium()&quot; /&gt;</div><div class="line">            &lt;/xsl:attribute&gt;</div><div class="line">        &lt;/medium&gt;</div><div class="line">    &lt;/test&gt;</div><div class="line">    </div><div class="line">&lt;/xsl:stylesheet&gt;</div></pre></td></tr></table></figure></p>
<p>java包的引用采用这种方式：xmlns:javaExt=”extensions”，这里的javaEx是在引用java方法是所要加的前缀，可以换成其他的名称；<br>exclude-result-prefixes=”javaExt”这句话是可选的，不加这句话也是可以的，加上后更好，貌似为了避免和java本身的命名空间重叠。</p>
<h2 id="3-在xsl中调用java静态方法"><a href="#3-在xsl中调用java静态方法" class="headerlink" title="3. 在xsl中调用java静态方法"></a>3. 在xsl中调用java静态方法</h2><p>调用方法在前面的第二步中可以看到，调用的方式为： <strong>前缀:类名.方法名</strong>，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javaExt:MaxMinMedium.getMax()</div></pre></td></tr></table></figure></p>
<p><strong>补充说明：</strong><br>这种调用方式是在java类中声明了包的时候所采用的，如果在java类中不声明包（将package extensions去掉）的时候，采用下面的方式：<br>xsl引用类：xmlns:javaExt=”MaxMinMedium”<br>xsl调用方法：javaExt:getMax()<br><em>这种不声明包的方式就要把所有的函数都写在一个java类中，不利于程序的解耦，所以不是很推荐，除非是比较简单单一的调用。</em></p>
<h2 id="4-解析"><a href="#4-解析" class="headerlink" title="4. 解析"></a>4. 解析</h2><p>解析的文件为 Transform.java，其中的内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//import needed transform packages</div><div class="line">import javax.xml.transform.TransformerFactory;</div><div class="line">import javax.xml.transform.Transformer;</div><div class="line">import javax.xml.transform.stream.StreamSource;</div><div class="line">import javax.xml.transform.stream.StreamResult;</div><div class="line">import javax.xml.transform.TransformerException;</div><div class="line">import javax.xml.transform.TransformerConfigurationException;</div><div class="line"></div><div class="line">//import needed java packages</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">public class Transform</div><div class="line">&#123;</div><div class="line">    public static void main(String[] args)</div><div class="line">    throws TransformerException, TransformerConfigurationException, </div><div class="line">           FileNotFoundException, IOException</div><div class="line">    &#123;  </div><div class="line">        //create a transformer factory class.</div><div class="line">        TransformerFactory tFactory = TransformerFactory.newInstance();</div><div class="line"></div><div class="line">        //create an instance using the factory class</div><div class="line">        Transformer transformer = tFactory.newTransformer(new StreamSource(&quot;s.xsl&quot;));</div><div class="line"></div><div class="line">        //call function transform from class transformer to complete conversion</div><div class="line">        transformer.transform(new StreamSource(&quot;x.xml&quot;), new StreamResult(new FileOutputStream(&quot;out.xml&quot;)));</div><div class="line"></div><div class="line">        //print the message telling user that the conversion is done. </div><div class="line">        System.out.println(&quot;************* The result is in out.xml*************&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(这段代码中的x.ml其实没用到，这个转换方法能否成功不能百分百保证…)</p>
<p>下面编译该文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac Transform.java</div></pre></td></tr></table></figure></p>
<p>然后会在当前路径生成 Transform.class文件。</p>
<p>下面调用该文件进行xsl转换：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java Transform</div></pre></td></tr></table></figure></p>
<p>如果没有错误的话理应会看到控制台输出一段文字：The result is in out.xml，然后在当前路径下会生成out.xml文件。<br>out.xml文件中的内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;test&gt;</div><div class="line">&lt;max value=&quot;4&quot;/&gt;</div><div class="line">&lt;min value=&quot;1&quot;/&gt;</div><div class="line">&lt;medium count=&quot;2&quot;&gt;</div><div class="line">&lt;/test&gt;</div></pre></td></tr></table></figure></p>
<p>至此，整个的文件夹的结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">test</div><div class="line">    MaxMinMedium.java</div><div class="line">    Transform.java</div><div class="line">    Transform.class</div><div class="line">    s.xsl</div><div class="line">    x.xml</div><div class="line">    out.xml</div><div class="line">    extensions</div><div class="line">        MaxMinMedium.class</div></pre></td></tr></table></figure></p>
<p>以上就是对xsl调用java方法的介绍，有待进一步研究～</p>
<p>参考链接：<br><a href="http://unmi.cc/xslt-call-java-method/" target="_blank" rel="noopener">http://unmi.cc/xslt-call-java-method/</a></p>
]]></content>
      
        <categories>
            
            <category> xslt </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xml </tag>
            
            <tag> xsl </tag>
            
            <tag> xslt </tag>
            
            <tag> xpath </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用xalan解析xml文件]]></title>
      <url>http://czlitony.github.io/2016/07/20/2016-07-20-ASF-xalan/</url>
      <content type="html"><![CDATA[<p>XSLT 是一种基于规则的格式转换语言。在许多人眼里,它的功能就是将一种格式的 xml 文件转换成另外一种格式的 xml 或 html 文件，仅此而已。不过，事实真是这样吗？</p>
<a id="more"></a>
<p>其实 XSLT 能够做的事情很多，绝对超乎你的想象。除了格式转换，XSLT 还能完成一些看起来和格式转换完全无关的工作。比如说文件访问或者是数据库查询等等。而这一切都要归功于 XSLT 扩展（XSLT Extension）。<br>根据 XSLT 1.0 的规范，符合标准的 XSLT 引擎应该支持 XSLT 扩展。也就是允许用户自定义 XSLT 的扩展元素（extension elements）和函数(extension functions)。今天我们所看到的主流 XSLT 引擎都按照国际标准，提供了自己的扩展方式。而开源软件中的 saxaon 和 xalan，在这方面走得更远。<br>Saxon 和 xalan 都是基于 java 开发的 XSLT 引擎，为它们编写扩展自然也基于 java。一般只要以下 3 步就可以完成一个扩展了。</p>
<ol>
<li>编写一个 java 类，在这个类里面设计好扩展功能，并以<strong>静态方法</strong>的形式提供给XSLT 引擎调用。</li>
<li>在 XSLT 文件中，声明一个自定义的命名空间（namespace）,该命名空间指出了类的位置</li>
<li>在 XSLT 文件中，在适当的地方，调用扩展即可。</li>
</ol>
<p>本文主要运用的是xalan, xalan是ASF的项目，可以访问其官网进行了解：<a href="https://xalan.apache.org/" target="_blank" rel="noopener">https://xalan.apache.org</a><br>关于xalan的使用这个网站可以参考一下（这个网站上面的例子试了不成功）：<a href="http://terpconnect.umd.edu/~zhangx/xml/html/xmlprog/xalan/javaext.html" target="_blank" rel="noopener">http://terpconnect.umd.edu/~zhangx/xml/html/xmlprog/xalan/javaext.html</a></p>
<h2 id="一-xalan-包"><a href="#一-xalan-包" class="headerlink" title="一. xalan 包"></a>一. xalan 包</h2><p>xalan有两种版本，分别是基于C++和Java来实现， 本文采用Java版本，有关xalan包的信息可以去官网进行查阅，找到对应的版本进行下载。本文使用的包是 <a href="http://www-us.apache.org/dist/xalan/xalan-j/binaries/" target="_blank" rel="noopener">Xalan-Java 2.7.2二进制包</a>.<br>将包下载之后，需要安装java相关的依赖。</p>
<h2 id="二-解析xml"><a href="#二-解析xml" class="headerlink" title="二. 解析xml"></a>二. 解析xml</h2><p>新建一个java文件SimpleTransform.java,添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//import needed xalan packages</div><div class="line">import javax.xml.transform.TransformerFactory;</div><div class="line">import javax.xml.transform.Transformer;</div><div class="line">import javax.xml.transform.stream.StreamSource;</div><div class="line">import javax.xml.transform.stream.StreamResult;</div><div class="line">import javax.xml.transform.TransformerException;</div><div class="line">import javax.xml.transform.TransformerConfigurationException;</div><div class="line"></div><div class="line">//import needed java packages</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">public class SimpleTransform</div><div class="line">&#123;</div><div class="line">    public static void main(String[] args)</div><div class="line">    throws TransformerException, TransformerConfigurationException, </div><div class="line">           FileNotFoundException, IOException</div><div class="line">    &#123;  </div><div class="line">        //create a transformer factory class.</div><div class="line">        TransformerFactory tFactory = TransformerFactory.newInstance();</div><div class="line"></div><div class="line">        //create an instance using the factory class</div><div class="line">        Transformer transformer = tFactory.newTransformer(new StreamSource(&quot;phonehometranslator.xsl&quot;));</div><div class="line"></div><div class="line">        //call function transform from class transformer to complete conversion</div><div class="line">        transformer.transform(new StreamSource(&quot;amc_one_of_everything.xml&quot;), new StreamResult(new FileOutputStream(&quot;out.xml&quot;)));</div><div class="line"></div><div class="line">        //print the message telling user that the conversion is done. </div><div class="line">        System.out.println(&quot;************* The result is in out.xml*************&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个文件的作用是将 amc_one_of_everything.xml 根据 phonehometranslator.xsl 解析成 out.xml .<br>如果解析成功的话会在console上输出: ”The result is in out.xml“;<br>如果出错的话会给出错误提示信息，错误提示信息相对python上面的lxml解析器还是更友好些的。<br>接着就是编译这个文件（之前下载的xalan包要放在SimpleTransform.java同一路径下，这样方便调用）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac SimpleTransform.java</div></pre></td></tr></table></figure></p>
<p>编译成功会生成SimpleTransform.class, 接下来就可以进行转换啦～～运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java SimpleTransform</div></pre></td></tr></table></figure></p>
<p>不出意外的话就可以看到转换后的结果了，当然前提是所写的xsl文件没有问题～</p>
<h2 id="三-在xsl中调用自定义的java函数"><a href="#三-在xsl中调用自定义的java函数" class="headerlink" title="三. 在xsl中调用自定义的java函数"></a>三. 在xsl中调用自定义的java函数</h2><p>想要调用java函数，就像本文开头说的那样，总共分三步。</p>
<h3 id="1-编写java类"><a href="#1-编写java类" class="headerlink" title="1.编写java类"></a>1.编写java类</h3><p>新建文件extFunc.java,向其中加入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.Iterator;</div><div class="line">import java.util.Collections;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class extFunc&#123;</div><div class="line">    private static ArrayList&lt;Integer&gt; valueList = new ArrayList&lt;Integer&gt;();</div><div class="line"></div><div class="line">    //reset sum and valueList</div><div class="line">    public static int reset() &#123;</div><div class="line">        valueList.clear();</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static int calc() &#123;</div><div class="line">        if(valueList.size() &gt; 0) &#123;</div><div class="line">            Collections.sort(valueList);</div><div class="line">            return 1;</div><div class="line">        &#125; else &#123;</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static int insert(int val) &#123;</div><div class="line">        valueList.add(val);</div><div class="line"></div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static int getMax() &#123;</div><div class="line">        return valueList.get(valueList.size()-1);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    public static int getMin() &#123;</div><div class="line">        return valueList.get(0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static int getMedium() &#123;</div><div class="line">        return valueList.get(valueList.size()/2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意其中的静态方法就是给后面的xsl文件调用的。这个文件中函数的简单介绍为：<br>xsl文件调用insert函数插入数值到ArrayList中，然后getMax,getMin,getMedium分别是获取ArrayList中所有数值的最大值、最小值、和中位数。calc主要就是将ArrayList排序，方便取得最大值、最小值和中位数。<br>reset就不用解释了～<br>然后同样编译这个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac extFunc.java</div></pre></td></tr></table></figure></p>
<h3 id="2-xsl命名空间"><a href="#2-xsl命名空间" class="headerlink" title="2.xsl命名空间"></a>2.xsl命名空间</h3><p>想要调用extFunc类中的文件，需要在xsl文件中将其引用进来，具体看下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; </div><div class="line">    xmlns:myext=&quot;extFunc&quot;</div><div class="line">    exclude-result-prefixes=&quot;myext&quot;&gt;</div><div class="line"></div><div class="line">    .</div><div class="line">    .</div><div class="line">    .</div><div class="line"></div><div class="line">&lt;/xsl:stylesheet&gt;</div></pre></td></tr></table></figure></p>
<p>xmlns:myext=”extFunc”就是将类引入，exclude-result-prefixes=”myext”声明调用的前缀。</p>
<h3 id="3-调用"><a href="#3-调用" class="headerlink" title="3.调用"></a>3.调用</h3><p>下面编写一个例子来调用extFunc类中的函数。<br>在phonehometranslator.xsl文件中写入如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;xsl:stylesheet version=&quot;1.0&quot; xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot; </div><div class="line">    xmlns:myext=&quot;extFunc&quot;</div><div class="line">    exclude-result-prefixes=&quot;myext&quot;&gt;</div><div class="line"></div><div class="line">    &lt;xsl:if test=&quot;myext:insert(1)&quot; /&gt;</div><div class="line">    &lt;xsl:if test=&quot;myext:insert(2)&quot; /&gt;</div><div class="line">    &lt;xsl:if test=&quot;myext:insert(3)&quot; /&gt;</div><div class="line">    &lt;xsl:if test=&quot;myext:insert(4)&quot; /&gt;</div><div class="line">    </div><div class="line">    &lt;xsl:if test=&quot;myext:calc()&quot; /&gt;</div><div class="line">    </div><div class="line">    &lt;test&gt;</div><div class="line">        &lt;max&gt;</div><div class="line">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class="line">                &lt;xsl:value-of select=&quot;myext:getMax()&quot; /&gt;</div><div class="line">            &lt;/xsl:attribute&gt;</div><div class="line">        &lt;/max&gt;</div><div class="line">        &lt;min&gt;</div><div class="line">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class="line">                &lt;xsl:value-of select=&quot;myext:getMin()&quot; /&gt;</div><div class="line">            &lt;/xsl:attribute&gt;</div><div class="line">        &lt;/min&gt;</div><div class="line">        &lt;medium&gt;</div><div class="line">            &lt;xsl:attribute name=&quot;value&quot;&gt;</div><div class="line">                &lt;xsl:value-of select=&quot;myext:getMedium()&quot; /&gt;</div><div class="line">            &lt;/xsl:attribute&gt;</div><div class="line">        &lt;/medium&gt;</div><div class="line">    &lt;/test&gt;</div><div class="line"></div><div class="line">&lt;/xsl:stylesheet&gt;</div></pre></td></tr></table></figure></p>
<p>这段代码如果没有问题的话，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java SimpleTransform</div></pre></td></tr></table></figure></p>
<p>如果没有错误的话，理应得到的xml文件内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;test&gt;</div><div class="line">&lt;max value=&quot;4&quot;/&gt;</div><div class="line">&lt;min value=&quot;1&quot;/&gt;</div><div class="line">&lt;medium count=&quot;2&quot;&gt;</div><div class="line">&lt;/test&gt;</div></pre></td></tr></table></figure></p>
<p>xalan调用java函数的功能还是很强大的，更多的内容请自行探索～～</p>
]]></content>
      
        <categories>
            
            <category> xslt </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xml </tag>
            
            <tag> xalan </tag>
            
            <tag> xsl </tag>
            
            <tag> xslt </tag>
            
            <tag> xpath </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vmware vSphere虚拟机与主机共享剪贴板]]></title>
      <url>http://czlitony.github.io/2016/07/12/2016-07-12-vmvare-vsphere-share-plate/</url>
      <content type="html"><![CDATA[<p>默认情况下，Vmware vSphere已禁用针对ESXESXi的复制和粘贴操作，以防止公开已复制到剪贴板中的敏感数据。其实可以通过设置启用它，具体操作如下：</p>
<a id="more"></a>
<ol>
<li><p>使用 vSphere Client 登录到 vCenter Server 系统并选择虚拟机，虚拟机要在关闭状态下。</p>
</li>
<li><p>选中虚拟机，单击右键编辑设置。</p>
</li>
<li><p>选择选项 &gt; 高级 &gt; 常规，然后单击配置参数。</p>
</li>
<li><p>单击添加行，并在“名称”和“值”列中键入以下值。名称值</p>
<pre><code>isolation.tools.copy.disable     false
isolation.tools.paste.disable    false
</code></pre></li>
<li><p>单击确定以关闭“配置参数”对话框，然后再次单击确定以关闭“虚拟机属性”对话框。</p>
</li>
<li><p>重新启动虚拟机。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vmware </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Samba配置方案]]></title>
      <url>http://czlitony.github.io/2016/07/12/2016-07-12-samba/</url>
      <content type="html"><![CDATA[<p>对于samba的配置有多种方案，本方案使所有的guest用户都可以不用输入用户名密码都能访问共享的文件夹。基于Linux Mint17来进行配置。</p>
<a id="more"></a>
<h2 id="安装samba"><a href="#安装samba" class="headerlink" title="安装samba"></a>安装samba</h2><p>安装samba比较简单，在控制台输入:</p>
<pre><code>sudo apt-get install samba
</code></pre><p>在Mint上还需要安装一些库：</p>
<pre><code>sudo apt-get install -y libsmbclient libsmbclient-dev libtevent0 libtalloc2
</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>这种方案的配置比较简单，配置文件为： </p>
<pre><code>/etc/samba/smb.conf 
</code></pre><p>原文件不变，向其中Share Definitions部分加入下面这段内容：</p>
<pre><code>[public]
    path = /home/tony 
    available = yes    
    browseable = yes
    writeable = yes
    public = yes 
    guest ok = yes
    read only = no
</code></pre><p>path是要共享的文件夹路径，我共享的是/home/tony这个文件夹下的所有内容。对于这个文件夹需要修改其权限为：</p>
<pre><code>chmod 777 /home/tony
</code></pre><h2 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h2><p>在控制台中输入：</p>
<pre><code>sudo service smbd restart
</code></pre><p>下面就可以愉快地访问共享的文件了</p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> samba </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用p4merge解决git冲突问题]]></title>
      <url>http://czlitony.github.io/2016/07/12/2016-07-12-git-p4merge/</url>
      <content type="html"><![CDATA[<p>git在遇到冲突的时候除了可以直接编辑文件来解决冲突，也可以借助一些第三方的图形化工具来解决。p4merge是p4v上采用的一种比对工具，本文采用p4merge来解决git冲突，平台是Linux Mint17。</p>
<a id="more"></a>
<h2 id="p4merge安装"><a href="#p4merge安装" class="headerlink" title="p4merge安装"></a>p4merge安装</h2><p><strong>如果linux系统上面已经安装过p4v客户端，p4merge应该已经装好了，就可以跳过p4merge安装这个步骤了。</strong></p>
<ol>
<li><p>到官网下载p4merge,选择linux平台进行下载</p>
<p> <a href="https://www.perforce.com/downloads/integrations" target="_blank" rel="noopener">https://www.perforce.com/downloads/integrations</a></p>
</li>
<li><p>解压下载的p4merge软件包</p>
<pre><code>tar -zxvf p4v.tgz
</code></pre></li>
<li><p>解压之后进入解压出来的文件夹，发现里面会有两个子文件夹bin和lib,将这两个文件夹中的文件分别拷贝到对应的系统目录下，执行以下指令即可：</p>
<pre><code>sudo cp -rf bin/* /usr/local/bin/
sudo cp -rf lib/* /usr/local/lib/
</code></pre></li>
<li><p>这个时候p4merge应该就可以使用了，在控制台输入p4merge应该就会出现diff和merge对话框。下面将会修改git的配置文件来使用p4merge.</p>
</li>
</ol>
<h2 id="配置-gitconfig"><a href="#配置-gitconfig" class="headerlink" title="配置.gitconfig"></a>配置.gitconfig</h2><p>打开.gitconfig:</p>
<pre><code>vim ~/.gitconfig
</code></pre><p>向其中添加以下内容：</p>
<pre><code>[diff]
    tool = p4merge
[difftool]
    prompt = false
[merge]
    tool = p4merge
[mergetool]
    prompt = false
</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>查看diff</p>
<pre><code>git difftool
</code></pre><p>解决冲突</p>
<pre><code>git mergetool
</code></pre>]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[技术点详解---SSL VPN]]></title>
      <url>http://czlitony.github.io/2016/07/06/2016-07-06-ssl-vpn-detailed-explanation/</url>
      <content type="html"><![CDATA[<p>SSL VPN是专栏VPN系列技术原理的最后一篇，SSL VPN作为远程接入型的VPN，已经具备非常广阔的前景，它的主要适应场景是取代L2TP Over IPSec，但功能要比L2TP Over IPSec更丰富，方案也更加灵活。</p>
<a id="more"></a>
<h2 id="一、SSL-VPN简介"><a href="#一、SSL-VPN简介" class="headerlink" title="一、SSL VPN简介"></a>一、SSL VPN简介</h2><p>何谓SSL VPN，首先要从SSL谈起，使用网络不能不提的是各个网站，浏览网站使用浏览器，网络上传送网页的协议叫HTTP，它是明文传播的，传播内容可以被黑客读取。而SSL全名叫Secure Session Layer（安全会话层），其最初目的是给HTTP加密使用的安全套件，使用SSL的HTTP，也就摇身一变成了HTTPS，端口也从HTTP的80变成了443。由于HTTPS具备安全性，也具备传输数据的能力，也就被研究VPN技术的专家盯上了，觉得HTTPS可以用于组建VPN方案，于是乎SSL VPN技术就呼之欲出了。经过多年的发展，SSL版本发展到了3.0，也被标准组织采纳为TLS（Transport Layer Security传输层安全） 1.0之中，所以SSL VPN也叫TLS VPN。下面是SSL 与SSL VPN、TLS的区别：</p>
<ol>
<li><p>SSL：单纯的实现对某些TCP应用的保护，如HTTPS和SFTP；</p>
</li>
<li><p>SSL VPN：利用TCP的传输作用以及SSL对TCP会话的保护，实现VPN业务，被保护的VPN业务可以是TCP的、也可以UDP，纯IP的应用；</p>
</li>
<li><p>TLS：在SSL上进行扩展，能够直接实现对UDP应用的保护，这也是传输层安全的最佳注释。</p>
</li>
</ol>
<p>接下来看看SSL VPN的使用场景吧：</p>
<p><img src="http://www.h3c.com.cn/res/201008/13/20100813_1032947_image001_686807_30005_0.jpg" alt=""></p>
<p>L2TP实现的是远程接入VPN，而IPSec为L2TP提供安全保护，这种应用已经非常成熟，但属于两个协议的生硬组合，在方案上不是特别灵活。而SSL VPN是天然的安全远程接入，在方案上，特别是权限控制、应用粒度上有独到之处，成为目前远程接入领域的香饽饽，目前已经超越了技术范畴，而成为一个安全网络服务框架。</p>
<p><img src="http://www.h3c.com.cn/res/201008/13/20100813_1032948_image002_686807_30005_0.jpg" alt=""></p>
<p>SSL VPN最常见的入口还是网页，所以推广起来特别方便：</p>
<ol>
<li><p>使用者只需要记住VPN的网站（通常是HTTPS），用浏览器打开该网站；</p>
</li>
<li><p>输入使用者的身份信息，身份信息可以是用户名、数字证书（如USB-Key）、静态口令、动态口令的至尊组合，确保身份不泄露、不假冒；</p>
</li>
<li><p>选择服务种类，其中WEB代理是最为简单的应用，也是控制粒度最细的SSL VPN应用，可以精确地控制每个链接；</p>
</li>
<li><p>端口映射是粒度仅次于WEB代理的应用，它通过TCP端口映射的方式（原理上类似于NAT内部服务器应用），为使用者提供远程接入TCP的服务，它需要专门的、与服务器配套的SSL VPN客户端程序帮忙；</p>
</li>
<li><p>IP连接是SSL VPN中粒度最粗的服务，但也是使用最广泛的，它实现了类似于L2TP的特性，所有客户端都可以从服务器获得一个VPN地址，然后直接访问内部服务器，它也需要专门的SSL VPN客户端程序帮忙；</p>
</li>
<li><p>SSL VPN由于处在TCP层，所以可以进行丰富的业务控制，如行为审计，可以记录每名用户的所有操作，为更好地管理VPN提供了有效统计数据；</p>
</li>
<li><p>当使用者退出SSL VPN登陆页面时，所有上述安全会话会统统释放。</p>
</li>
</ol>
<p>以上7个步骤可以划分为三个阶段：阶段一是连接与验证、阶段二是VPN应用、阶段三是审计与退出。由于连接与验证、审计与退出都是统一流程，也比较简单，本期针对大家较为关注的阶段二，VPN应用部分进行展开介绍。</p>
<h2 id="二、WEB代理"><a href="#二、WEB代理" class="headerlink" title="二、WEB代理"></a>二、WEB代理</h2><p><img src="http://www.h3c.com.cn/res/201008/13/20100813_1032949_image003_686807_30005_0.jpg" alt=""></p>
<p>由于SSL是封装在TCP上的，穿越NAT不是问题，所以在示例中客户端使用公网地址进行介绍：</p>
<ol>
<li><p>假设SSL VPN的WEB站点的互联网域名是<a href="https://sslvpn，该WEB站点对应的主机则是SSL" target="_blank" rel="noopener">https://sslvpn，该WEB站点对应的主机则是SSL</a> VPN服务器；</p>
</li>
<li><p>使用者登陆SSL VPN的WEB页面后，WEB代理一栏会有许多链接，如内部财务报表、订单提交等内部网站；</p>
</li>
<li><p>假设“订单提交”网站在单位内部私有URL是<a href="http://site1/page，那么在SSL" target="_blank" rel="noopener">http://site1/page，那么在SSL</a> VPN服务器上的订单提交链接URL则会进行相应的修改，变成<a href="https://sslvpn/httpsite1/pate，相当于SSL" target="_blank" rel="noopener">https://sslvpn/httpsite1/pate，相当于SSL</a> VPN站点的内部链接；</p>
</li>
<li><p>使用者点击“订单提交”链接后，会新建一个浏览器窗口，打开链接<a href="https://sslvpn/httpsite1/page，也就是说对于使用者而言，订单提交像是SSL" target="_blank" rel="noopener">https://sslvpn/httpsite1/page，也就是说对于使用者而言，订单提交像是SSL</a> VPN站点的一个链接，而非另外一个站点，所有的访问都终结在SSL VPN站点；</p>
</li>
<li><p>SSL VPN站点的所有者SSL VPN服务器在接收到使用者对<a href="https://sslvpn/httpsite1/page的页面请求后，SSL" target="_blank" rel="noopener">https://sslvpn/httpsite1/page的页面请求后，SSL</a> VPN服务器会做WEB代理的工作，即以内部地址10.1.1.1向真正的“订单提交”站点10.6.16.3访问页面<a href="http://site1/page；" target="_blank" rel="noopener">http://site1/page；</a></p>
</li>
<li><p>可以发现整个页面访问是由使用者与服务器之间的HTTPS会话、服务器与“订单提交”站点的HTTP会话连接而成的，服务器在这个访问中起的是WEB代理作用，因为在“订单提交”站点看来，访问者IP是服务器，而不是最终用户IP；</p>
</li>
<li><p>而使用者访问另外一个站点“财务报表”，也是类似过程。</p>
</li>
</ol>
<p>WEB代理因为原理简单，实现起来较为容易，因为传统的WEB Proxy代理是两段HTTP会话的衔接，而SSL VPN的WEB代理则把用户与服务器的连接把HTTP换成了HTTPS、并对网站的URL进行了替换而已，从图中我们可以看到红色部分即为URL的替换。</p>
<p><img src="http://www.h3c.com.cn/res/201008/13/20100813_1032950_image004_686807_30005_0.jpg" alt=""></p>
<p>从这张封装原理图，我们可以比较清楚地看到HTTPS与HTTP会话在这个访问过程中的衔接。可能有人会问，让“订单提交”站点直接在互联网提供HTTPS服务，直接用一个HTTPS会话不是更好，原理上当然更好，但是有更多的现实问题：</p>
<ol>
<li><p>直接在互联网提供HTTPS服务，需要一个互联网地址和公共域名，这两样都是要花钱申请的，使用SSL VPN统一接入，这么多内部站点只需要一个公网地址、一个公网域名，多划算；</p>
</li>
<li><p>订单提交真的需要开放到互联网吗？订单提交都是公司内部业务，访问量也不大，直接开放到互联网并不能有更多的提速效果；</p>
</li>
<li><p>开放到互联网怎么保证安全，财务报表等信息都是公司机密，老老实实放在内网，前面通过SSL VPN服务器挡着，即使有攻击也只是攻击SSL VPN服务器，内网服务器还是很安全的。</p>
</li>
</ol>
<p>综上所述对于一些内部站点，使用SSL VPN还是相当有好处的，特别是在拥有一款强大的SSL VPN服务器的时候。</p>
<h2 id="三、端口映射"><a href="#三、端口映射" class="headerlink" title="三、端口映射"></a>三、端口映射</h2><p>刚才讲的是WEB代理，对于一些内部服务器并不是WEB站点，那WEB代理还能使用吗？不能使用了，比如内部站点是FTP应用，那么访问不可能由HTTPS会话和FTP会话衔接而成，SSL VPN必须想其余办法。由于SSL只能封装在TCP之上，所以端口映射服务器只能针对内部的TCP应用，如FTP。</p>
<p><img src="http://www.h3c.com.cn/res/201008/13/20100813_1032951_image005_686807_30005_0.jpg" alt=""></p>
<p>在端口映射中，SSL VPN的使用者会从SSL VPN页面自动加载一个客户端程序，我们姑且就叫它SSL VPN客户端程序吧，它是怎么使端口映射工作的呢，我们假设内部有两个FTP服务器，一个叫FTP1，内部地址10.6.16.1，另一个是FTP2，内部地址10.6.16.4，都是监听TCP 21端口：</p>
<ol>
<li><p>SSL VPN服务器为这两个内部服务器做了端口映射，TCP 2021端口映射到FTP1的TCP 21，3021则映射到FTP2；</p>
</li>
<li><p>SSL VPN服务器会让使用者PC自动加载SSL VPN客户端程序，并根据这两个映射生成两个静态host映射表项，告诉使用者PC访问FTP1其实就是访问127.0.0.2，访问FTP2就是访问127.0.0.3，127.0.0.0/8称为环回地址，及该地址只能在PC内部使用，不可能被发出到PC之外，那么SSL VPN客户端程序就监听这两个内部地址；</p>
</li>
<li><p>使用者访问FTP1，其实访问的是TCP 127.0.0.2:21，所有数据都会被SSL VPN客户端程序监听，客户端程序会进行代理，变成访问服务器TCP 6.16.5.6:2021，该TCP访问会使用SSL进行加密；</p>
</li>
<li><p>大家可能会问，为何需要个客户端程序进行代理呢，使用者的应用程序不能直接和SSL VPN服务器建立SSL会话吗？这个问题很好，使用者的应用程序的确无法直接建立SSL会话，所以使用客户端程序代劳，这种方式可以让所有TCP应用都能够享用SSL VPN服务；</p>
</li>
<li><p>服务器接收到SSL加密的请求后，首先会进行解密，然后根据端口映射，会向内部FTP1站点TCP 10.6.16.1:21发起访问；</p>
</li>
<li><p>反向转发以及访问FTP2类似。</p>
</li>
</ol>
<p>我们可以发现这种端口映射使整个访问过程由三段会话组成：使用者应用程序与SSL VPN客户端程序的普通TCP会话、SSL VPN客户端程序与服务器的SSL会话、服务器与内部站点的普通TCP会话。</p>
<p><img src="http://www.h3c.com.cn/res/201008/13/20100813_1032952_image006_686807_30005_0.jpg" alt=""></p>
<p>从这张图可以看出更详细的数据封装过程以及会话衔接过程，使用SSL VPN服务器进行端口映射的好处与WEB代理类似，可以牺牲SSL VPN服务器，保护内部服务器。</p>
<h2 id="四、IP连接"><a href="#四、IP连接" class="headerlink" title="四、IP连接"></a>四、IP连接</h2><p>前面介绍的WEB代理是专门针对WEB应用的，端口映射则受制于SSL只支持TCP应用，如果使用者要任意访问一个内部服务器的任意协议、端口，该如何是好呢？IP连接应运而生，IP连接可以完美地替代L2TP这种传统意义上的VPN：虚拟连接、内部地址、路由互联。</p>
<p><img src="http://www.h3c.com.cn/res/201008/13/20100813_1032953_image007_686807_30005_0.jpg" alt=""></p>
<p>我们从上图来解释一下IP连接的原理：</p>
<ol>
<li><p>用户登陆SSL VPN页面后，会建立HTTPS会话，服务器通过这个会话给用户自动加载SSL VPN客户端程序；</p>
</li>
<li><p>此时的SSL VPN客户端程序的目的是给用户PC创建一个虚拟网卡，以实现类似于L2TP那种到客户总部网络的VPN连接；</p>
</li>
<li><p>虚拟网卡创建好后，服务器会给该用户从地址池中取一个地址分配给该用户，同时下发路由、DNS等信息，服务器针对该地址池也会有一个服务器地址192.168.1.1，作为所有客户端程序虚拟网卡的网关；</p>
</li>
<li><p>此时SSL VPN客户端程序与服务器之间会建立一个全新的SSL会话，专门用来传输虚拟网卡与服务器之间的流量；</p>
</li>
<li><p>假设用户要访问DNS 10.6.16.1，根据路由的关系，PC会通过虚拟网卡将DNS请求（源192.168.1.2目的10.6.16.1）转发给SSL VPN服务器192.168.1.1；</p>
</li>
<li><p>PC上的SSL VPN客户端程序会将虚拟网卡发出的IP包封装至新的SSL会话中，通过互联网传送到服务器；</p>
</li>
<li><p>服务器进行解密，解封装后发现IP目的地址是10.6.16.1，那么就转发给DNS；</p>
</li>
<li><p>反向过程以及访问ERP服务器10.6.16.4与此类似。</p>
</li>
</ol>
<p>再来看一下数据封装过程，会有更加直观的认识：</p>
<p><img src="http://www.h3c.com.cn/res/201008/13/20100813_1032954_image008_686807_30005_0.jpg" alt=""></p>
<p>在SSL VPN的IP连接中，客户端访问内部服务器不再像WEB代理、端口映射那应该多个会话衔接而成，而是一个内部地址端到端会话，穿越互联网的时候直接会话被封装至SSL会话中，和L2TP Over IPSec非常类似。</p>
<h2 id="五、SSL-VPN总结"><a href="#五、SSL-VPN总结" class="headerlink" title="五、SSL VPN总结"></a>五、SSL VPN总结</h2><p>为什么说SSL VPN可以通过多粒度的服务呢？这是一个对比：</p>
<ol>
<li><p>WEB代理，可以精确到对HTTP站点某些URL的控制；</p>
</li>
<li><p>端口映射，可以精确到对某个端口的控制；</p>
</li>
<li><p>IP连接，可以精确到对某个IP地址的控制；</p>
</li>
</ol>
<p>L2TP只能实现3，无法实现1和2，更是很难实现行为审计功能。因此业界非常看好SSL VPN的前景，但使用SSL VPN必然也有一些局限性和代价：</p>
<ol>
<li><p>对于站点到站点的应用，效率上不如IPSec，所以通常用来取代L2TP方案，而不是IPSec方案；</p>
</li>
<li><p>SSL VPN的IP连接服务，在有连接的TCP中封装无连接的IP、UDP上效率不是很高，如果TCP中再封装TCP，在网络状况不稳定情况下，传输效率可能会急剧下降，但这个难题在被逐步功课之中，将来的TLS VPN可以实现在安全UDP会话，那情况就会好转很多；</p>
</li>
<li><p>SSL VPN客户端必须配合SSL VPN服务器，各个厂家的客户端都是自行开发的，无法互相兼容，由于客户端都是动态加载的，也就是说访问什么服务器，必然加载与之配套的客户端，不存在兼容性问题，但客户端是操作系统相关，甚至是浏览器相关的，很多厂家的SSL VPN只开发了基于Windows IE的客户端，使用Linux、BSD操作系统的使用者无疑就杯具了，这里呼吁各大厂家要多多照顾一下其余操作系统用户。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> network </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SSL </tag>
            
            <tag> VPN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数字签名是什么？]]></title>
      <url>http://czlitony.github.io/2016/07/04/2016-07-04-digital-signature-and-digital%20certificate/</url>
      <content type="html"><![CDATA[<p>今天，我读到一篇好文章。<br>它用图片通俗易懂地解释了，”数字签名”（digital signature）和”数字证书”（digital certificate）到底是什么。我对这些问题的理解，一直是模模糊糊的，很多细节搞不清楚。读完这篇文章后，发现思路一下子就理清了。</p>
<a id="more"></a>
<hr>
<p>原文网址：<a href="http://www.youdzone.com/signature.html" target="_blank" rel="noopener">http://www.youdzone.com/signature.html</a><br>转载网址：<a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a> </p>
<p> 1.鲍勃有两把钥匙，一把是公钥，另一把是私钥。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080901.png" alt=""></p>
<p> 2.鲍勃把公钥送给他的朋友们—-帕蒂、道格、苏珊—-每人一把。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080902.png" alt=""></p>
<p> 3.苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080903.png" alt=""></p>
<p> 4.鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080904.png" alt=""></p>
<p> 5.鲍勃给苏珊回信，决定采用”数字签名”。他写完后先用Hash函数，生成信件的摘要（digest）。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080905.png" alt=""></p>
<p> 6.然后，鲍勃使用私钥，对这个摘要加密，生成”数字签名”（signature）。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080906.png" alt=""></p>
<p> 7.鲍勃将这个签名，附在信件下面，一起发给苏珊。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080907.png" alt=""></p>
<p> 8.苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080908.png" alt=""></p>
<p> 9.苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080909.png" alt=""></p>
<p> 10.复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成”数字签名”，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080910.png" alt=""></p>
<p> 11.后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找”证书中心”（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成”数字证书”（Digital Certificate）。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080911.png" alt=""></p>
<p> 12.鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080912.png" alt=""></p>
<p> 13.苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明”数字签名”是否真的是鲍勃签的。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080913.png" alt=""></p>
<p> 14.下面，我们看一个应用”数字证书”的实例：https协议。这个协议主要用于网页加密。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080914.jpg" alt=""></p>
<p> 15.首先，客户端向服务器发出加密请求。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080915.png" alt=""></p>
<p> 16.服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080916.png" alt=""></p>
<p> 17.客户端（浏览器）的”证书管理器”，有”受信任的根证书颁发机构”列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080917.png" alt=""></p>
<p> 18.如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080918.png" alt=""></p>
<p> 19.如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080919.jpg" alt=""></p>
<p> 20.如果数字证书是可靠的，客户端就可以使用证书中的服务器公钥，对信息进行加密，然后与服务器交换加密信息。</p>
<p><img src="http://image.beekka.com/blog/201108/bg2011080920.png" alt=""></p>
<p>（完）</p>
]]></content>
      
        <categories>
            
            <category> network </category>
            
        </categories>
        
        
        <tags>
            
            <tag> digital signature </tag>
            
            <tag> digital certificate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vusual Stdio Code 常用快捷键]]></title>
      <url>http://czlitony.github.io/2016/06/30/2016-06-30-Visual-Stdio-Code/</url>
      <content type="html"><![CDATA[<p>Visual Studio Code是个牛逼的编辑器，启动非常快，完全可以用来代替其他文本文件编辑工具。又可以用来做开发，支持各种语言。</p>
<a id="more"></a>
<h1 id="主命令框"><a href="#主命令框" class="headerlink" title="主命令框"></a>主命令框</h1><p>最重要的功能就是F1或Ctrl+Shift+P打开的命令面板了，在这个命令框里可以执行VSCode的任何一条命令，可以查看每条命令对应的快捷键，甚至可以关闭这个编辑器。</p>
<h1 id="Ctrl-P-模式"><a href="#Ctrl-P-模式" class="headerlink" title="Ctrl+P 模式"></a>Ctrl+P 模式</h1><p>在Ctrl+P下输入&gt;又可以回到主命令框 Ctrl+Shift+P模式。</p>
<p>在Ctrl+P窗口下还可以</p>
<ul>
<li>直接输入文件名，快速打开文件</li>
<li>? 列出当前可执行的动作</li>
<li>! 显示Errors或Warnings，也可以Ctrl+Shift+M</li>
<li>: 跳转到行数，也可以Ctrl+G直接进入</li>
<li>@ 跳转到symbol（搜索变量或者函数），也可以Ctrl+Shift+o直接进入</li>
<li>@:根据分类跳转symbol，查找属性或函数，也可以Ctrl+Shift+o后输入:进入</li>
<li># 根据名字查找symbol，也可以Ctrl+T</li>
</ul>
<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><ul>
<li>打开一个新窗口： Ctrl+Shift+N</li>
<li>关闭窗口： Ctrl+Shift+W</li>
</ul>
<ul>
<li>新建文件 Ctrl+N</li>
<li>历史打开文件之间切换 Ctrl+Tab，Alt+Left，Alt+Right</li>
<li>切出一个新的编辑器（最多3个）Ctrl+\，也可以按住Ctrl鼠标点击Explorer里的文件名</li>
<li>左中右3个编辑器的快捷键Ctrl+1 Ctrl+2 Ctrl+3</li>
<li>3个编辑器之间循环切换 Ctrl+`</li>
<li>编辑器换位置，Ctrl+k然后按Left或Right</li>
</ul>
<ul>
<li>ctrl+/ 注释</li>
<li>代码行缩进Ctrl+[， Ctrl+]</li>
<li>Ctrl+C Ctrl+V如果不选中，默认复制或剪切一整行</li>
<li>代码格式化：Shift+Alt+F，或Ctrl+Shift+P后输入format code</li>
<li>修剪行尾空格Ctrl+K Ctrl+X</li>
<li>上下移动一行： Alt+Up 或 Alt+Down</li>
<li>向上向下复制一行： Shift+Alt+Up或Shift+Alt+Down</li>
<li>在当前行下边插入一行Ctrl+Enter</li>
<li>在当前行上方插入一行Ctrl+Shift+Enter</li>
<li>shift+ctrl+[ 单个函数折叠</li>
<li>shift+ctrl+] 单个函数展开</li>
<li>shift+ctrl+alt+[ 整个文件函数折叠</li>
<li>shift+ctrl+alt+] 整个文件函数展开</li>
<li>shift+ctrl+K 删除一行</li>
</ul>
<ul>
<li>移动到文件结尾：Ctrl+End</li>
<li>移动到文件开头：Ctrl+Home</li>
<li>移动到后半个括号 Ctrl+Shift+]</li>
<li>选中当前行Ctrl+i</li>
<li>选择从光标到行尾Shift+End</li>
<li>选择从行首到光标处Shift+Home</li>
<li>删除光标右侧的所有字Ctrl+Delete</li>
<li>Shrink/expand selection： Shift+Alt+Left和Shift+Alt+Right</li>
<li>Multi-Cursor：可以连续选择多处，然后一起修改，Alt+Click添加cursor或者Ctrl+Alt+Down 或 Ctrl+Alt+Up</li>
<li>同时选中所有匹配的Ctrl+Shift+L</li>
<li>Ctrl+D下一个匹配的也被选中(被我自定义成删除当前行了，见下边Ctrl+Shift+K)</li>
<li>回退上一个光标操作Ctrl+U</li>
</ul>
<ul>
<li>F3       向后查找</li>
<li>Shift+F3   向前查找</li>
</ul>
<ul>
<li>ctrl+click或F12 转到定义</li>
<li>ctrl+hover      显示定义或声明</li>
<li>shift+alt+F10   快速显示定义</li>
</ul>
<ul>
<li>ctrl+F2      高亮所有选中的单词</li>
<li>shift+ctrl+L 高亮所有选中的内容</li>
</ul>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> visual stdio code </tag>
            
            <tag> vsc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cmd Markdown]]></title>
      <url>http://czlitony.github.io/2016/06/30/2016-06-30-cmd-markdown/</url>
      <content type="html"><![CDATA[<p>Cmd Markdown是一种markdown文本编辑工具，这篇文章对该工具进行了相关的介绍。</p>
<a id="more"></a>
<h1 id="欢迎使用-Cmd-Markdown-编辑阅读器"><a href="#欢迎使用-Cmd-Markdown-编辑阅读器" class="headerlink" title="欢迎使用 Cmd Markdown 编辑阅读器"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><hr>
<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"> </p>
<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>
<h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="noopener">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>
<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>
</blockquote>
<hr>
<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="noopener">Todo 列表</a></h3><ul>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[x] 新增 Todo 列表功能</li>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-书写一个质能守恒公式-LaTeX"><a href="#2-书写一个质能守恒公式-LaTeX" class="headerlink" title="2. 书写一个质能守恒公式[^LaTeX]"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>
<h3 id="3-高亮一段代码-code"><a href="#3-高亮一段代码-code" class="headerlink" title="3. 高亮一段代码[^code]"></a>3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># A comment</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@requires_authorization</div><div class="line">class SomeClass:</div><div class="line">pass</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line"># A comment</div><div class="line">print &apos;hello world&apos;</div></pre></td></tr></table></figure>
<h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="noopener">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: Start</div><div class="line">op=&gt;operation: Your Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line">e=&gt;end</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="noopener">序列图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>
<h3 id="6-绘制表格"><a href="#6-绘制表格" class="headerlink" title="6. 绘制表格"></a>6. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="7-更详细语法说明"><a href="#7-更详细语法说明" class="headerlink" title="7. 更详细语法说明"></a>7. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="noopener">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>
<h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右测的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>通过管理工具栏可以：</p>
<p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>
<h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>
<h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>标签： 未分类</p>
<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>
<p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="noopener">@ghosert</a><br>2015 年 06月 15日    </p>
<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p>
<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>
]]></content>
      
        <categories>
            
            <category> markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
